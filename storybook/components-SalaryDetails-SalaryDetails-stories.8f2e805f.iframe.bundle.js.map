{"version":3,"file":"components-SalaryDetails-SalaryDetails-stories.8f2e805f.iframe.bundle.js","mappings":";;;;;;;;AAYA;;;;;;ACDA","sources":["webpack://wingman-fe/./lib/components/SalaryDetails/queries.ts","webpack://wingman-fe/./lib/components/SalaryDetails/validateSalary.ts"],"sourcesContent":["import { gql } from '@apollo/client';\n\nexport const PAY_TYPES = gql`\n  query payTypes($schemeId: String!) {\n    payTypes(schemeId: $schemeId) {\n      basisCode\n      intervalCode\n      label\n    }\n  }\n`;\n\nexport const CURRENCIES = gql`\n  query currencies($usageTypeCode: String!) {\n    currencies(usageTypeCode: $usageTypeCode) {\n      code\n    }\n  }\n`;\n","import type { TextField } from 'braid-design-system';\nimport type { ComponentProps } from 'react';\n\nimport { MAX_CHAR_LIMIT } from './SalaryDetails';\nimport type { SalaryError } from './types';\n\ninterface Validation {\n  tone: Exclude<ComponentProps<typeof TextField>['tone'], 'caution'>;\n  message?: string;\n}\n\nexport const validateMinAmount = (\n  minAmount: string,\n  errors?: SalaryError,\n): Validation => {\n  if (errors?.minimumAmount?.message) {\n    return {\n      tone: 'critical',\n      message: errors.minimumAmount.message,\n    };\n  }\n\n  if (!minAmount) {\n    return { tone: 'neutral' };\n  }\n\n  const n = Number(minAmount);\n\n  if (n < 0) {\n    return {\n      tone: 'critical',\n      message: 'Must be positive',\n    };\n  }\n\n  return { tone: 'neutral' };\n};\n\nexport const validateMaxAmount = (\n  minAmount: string,\n  maxAmount: string,\n  errors?: SalaryError,\n): Validation => {\n  if (errors?.maximumAmount?.message) {\n    return {\n      tone: 'critical',\n      message: errors.maximumAmount.message,\n    };\n  }\n\n  if (\n    Boolean(minAmount) &&\n    Boolean(maxAmount) &&\n    Number(maxAmount) < Number(minAmount)\n  ) {\n    return {\n      tone: 'critical',\n      message: 'Must be greater than minimum',\n    };\n  }\n\n  return { tone: 'neutral' };\n};\n\nexport const validateDescription = (\n  description: string,\n  errors?: SalaryError,\n): Validation => {\n  if (errors?.description?.message) {\n    return {\n      tone: 'critical',\n      message: errors.description.message,\n    };\n  }\n\n  if (description.length > MAX_CHAR_LIMIT) {\n    return {\n      tone: 'critical',\n      message: `Must not exceed ${MAX_CHAR_LIMIT} characters`,\n    };\n  }\n\n  return { tone: 'neutral' };\n};\n"],"names":[],"sourceRoot":""}