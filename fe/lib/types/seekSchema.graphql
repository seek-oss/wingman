schema {
  query: Query
  mutation: Mutation
}
"""The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start."""
type Query {
  """The API version."""
  version: String!
  """
  An application questionnaire with the given `id`.
  
  Questionnaires can be associated with a `PositionProfile`.
  
  This query accepts browser tokens that include the `query:application-questionnaires` scope.
  """
  applicationQuestionnaire(
    """The identifier of the application questionnaire to retrieve."""
    id: String!
  ): ApplicationQuestionnaire
  """Ad products available when creating an advertisement."""
  advertisementCreationProducts(
    """The hirer identifier."""
    hirerId: String!
    """The current ad with possible field changes"""
    draftAdvertisement: AdProductAdvertisementDraftInput!
  ): [AdProduct!] @deprecated(reason: "Use `seekAnzHirerAdvertisementCreationProducts`.")
  """Ad products available when updating an advertisement."""
  advertisementModificationProducts(
    """The hirer identifier."""
    hirerId: String!
    """The current ad when the client was initialised."""
    advertisement: AdProductAdvertisementInput!
    """The current ad with possible field changes"""
    draftAdvertisement: AdProductAdvertisementDraftInput!
  ): [AdProduct!] @deprecated(reason: "Use `seekAnzHirerAdvertisementModificationProducts`.")
  """Ad products available when creating an advertisement."""
  seekAnzHirerAdvertisementCreationProducts(
    """The hirer identifier."""
    hirerId: String!
    """The current ad with possible field changes"""
    draftAdvertisement: SeekAnzAdProductAdvertisementDraftInput!
  ): [SeekAnzAdProduct!]
  """Ad products available when updating an advertisement."""
  seekAnzHirerAdvertisementModificationProducts(
    """The hirer identifier."""
    hirerId: String!
    """The advertisement identifier."""
    advertisementId: String!
    """The advertisement with possible field changes."""
    draftAdvertisement: SeekAnzAdProductAdvertisementDraftInput!
  ): [SeekAnzAdProduct!]
  """
  Ad products available when updating an advertisement.
  
  Use this query when you don't have the live advertisement identifier.
  """
  seekAnzHirerAdvertisementModificationProductsAlt(
    """The hirer identifier."""
    hirerId: String!
    """The advertisement before any field changes."""
    advertisement: SeekAnzAdProductAdvertisementInput!
    """The advertisement with possible field changes."""
    draftAdvertisement: SeekAnzAdProductAdvertisementDraftInput!
  ): [SeekAnzAdProduct!]
  """
  The job category for the given `id`.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  jobCategory(
    """The job category identifier."""
    id: String!
  ): JobCategory
  """
  A list of top-level job categories for the provided scheme.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  jobCategories(
    """
    The scheme of the job categories.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
  ): [JobCategory!]!
  """
  An array of suggested job categories for the provided partial `PositionProfile`.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  jobCategorySuggestions(
    """
    The partial position profile to suggest a job category for.
    
    This should include the same field values that will eventually be used to create or post the `PositionProfile`.
    """
    positionProfile: JobCategorySuggestionPositionProfileInput!
    """
    The scheme of the suggested job categories.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """
    The identifier for the organization hiring for the position.
    
    This is deprecated; use `positionProfile.positionOrganizations` instead.
    """
    hirerId: String
    """
    A non-negative limit to the number of job categories to return.
    
    Defaults to 10.
    """
    first: Int
  ): [JobCategorySuggestionChoice!]!
  """
  A location node with the given location `id`.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  location(
    """The location identifier."""
    id: String!
  ): Location
  """
  An array of location nodes relevant to the text provided.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  locationSuggestions(
    """
    The context that the location suggestions will be used for.
    
    The only supported value is `PositionPosting` which returns locations for the purposes of posting a position profile.
    Additional values will be added in the future.
    """
    usageTypeCode: String!
    """
    The scheme for the location dataset to query.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """
    The hirer identifier for relevant locations result.
    
    `hirerId` is ignored when its scheme doesn't match `schemeId`.
    """
    hirerId: String
    """The input used for the location suggestions."""
    text: String!
    """
    A non-negative limit to the number of locations to return.
    
    Defaults to 20.
    """
    first: Int
  ): [LocationSuggestion!]
  """
  An array of locations relevant to the provided geolocation ordered by distance.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  nearestLocations(
    """
    The scheme for the location dataset to query.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """The geolocation coordinates input used for the location suggestions."""
    geoLocation: GeoLocationInput!
    """
    A non-negative limit to the number of locations to return.
    
    Defaults to the maximum value of 10.
    """
    first: Int
  ): [Location!]
  """
  The hiring organization for the given `id`.
  
  This query accepts browser tokens that include the `query:organizations` scope.
  """
  hiringOrganization(
    """The hiring organization identifier."""
    id: String!
  ): HiringOrganization
  """
  A hiring organization corresponding to the given SEEK ANZ advertiser ID.
  
  This query accepts browser tokens that include the `query:organizations` scope.
  """
  seekAnzAdvertiser(
    """
    The legacy SEEK ANZ advertiser ID.
    
    This is a numeric identifier used by SEEK ANZ's legacy Job Posting & Application Export APIs.
    """
    id: Int!
  ): HiringOrganization
  """A page of advertisement brandings associated with the specified `hirerId`."""
  advertisementBrandings(
    """
    An opaque cursor to the earlier bounding advertisement brandings.
    
    Resulting advertisement brandings will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding advertisement brandings.
    
    Resulting advertisement brandings will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of advertisement brandings to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess advertisement brandings will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of advertisement brandings to return from the end of the list.
    
    Excess advertisement brandings will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The hirer identifier."""
    hirerId: String!
  ): AdvertisementBrandingsConnection!
  """The advertisement branding for the given `id`."""
  advertisementBranding(
    """The advertisement branding identifier."""
    id: String!
  ): AdvertisementBranding
  """A position opening with the given `id`."""
  positionOpening(
    """
    The position opening identifier.
    
    This is the `documentId` of the returned `PositionOpening` object.
    """
    id: String!
  ): PositionOpening
  """A position profile with its position opening, given the position profile `id`."""
  positionOpeningWithPositionProfile(
    """
    The position profile identifier.
    
    This is the `profileId` of the returned `PositionProfile` object.
    """
    id: String!
  ): PositionOpening
  """A position profile with the given `id`."""
  positionProfile(
    """
    The position profile identifier.
    
    This is the `profileId` of the returned `PositionProfile` object.
    """
    id: String!
  ): PositionProfile
  """A page of position openings for the given `hirerId`."""
  positionOpenings(
    """The opaque identifier of the hiring organization to retrieve position openings for."""
    hirerId: String!
    """
    An opaque cursor to the earlier bounding page.
    
    Resulting position openings will _succeed_ this cursor.
    """
    after: String
    """
    The upper limit of position openings to return from the start of the list.
    
    Defaults to 10 if `first` is not specified.
    Excess position openings will be trimmed from the end of the list.
    """
    first: Int
    """The additional `PositionOpening`-specific criteria to filter by."""
    filter: PositionOpeningsFilterInput
  ): PositionOpeningConnection!
  """
  A candidate with the given `applicationProfileId` with only that
  profile included.
  
  This will include the candidate's personal details along with the
  profile they've elected to represent them for this application.
  """
  candidateWithApplicationProfile(
    """The application profile identifier to retrieve."""
    applicationProfileId: String!
  ): Candidate @deprecated(reason: "Use `candidateProfile` and select the `candidate` field.")
  """The `CandidateProfile` for the given `id`."""
  candidateProfile(
    """
    The profile identifier.
    
    This is the `profileId` of the returned `CandidateProfile` object.
    """
    id: String!
  ): CandidateProfile
  """
  The candidate for the given `id`.
  
  This will include the candidate's personal details along with all
  application profiles for a single hirer.
  """
  candidate(
    """
    The candidate identifier.
    
    This is the `documentId` of the returned `Candidate` object.
    """
    id: String!
  ): Candidate
  """
  A page of webhook attempts matching the specified criteria generated by a selected subscription.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttemptsForSubscription(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
    """The subscription opaque identifier that generated the attempts."""
    subscriptionId: String!
  ): WebhookAttemptsConnection!
  """
  A page of webhook attempts matching the specified criteria generated by a selected event.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttemptsForEvent(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
    """The event opaque identifier that generated the attempts."""
    eventId: String!
  ): WebhookAttemptsConnection!
  """The webhook subscription for the given `id`."""
  webhookSubscription(
    """The webhook subscription identifier."""
    id: String!
  ): WebhookSubscription
  """
  A page of webhook subscriptions matching the specified criteria.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known subscription if no pagination arguments are provided.
  """
  webhookSubscriptions(
    """
    An opaque cursor to the earlier bounding webhook subscription.
    
    Resulting webhook subscriptions will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook subscription.
    
    Resulting webhook subscriptions will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook subscriptions to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook subscriptions will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook subscriptions to return from the end of the list.
    
    Excess webhook subscriptions will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookSubscription`-specific criteria to filter by."""
    filter: WebhookSubscriptionsFilterInput
    """
    The data source for the webhook subscription.
    
    This commonly refers to a SEEK brand.
    See the relevant `WebhookSubscription` implementation for a list of supported schemes.
    """
    schemeId: String!
  ): WebhookSubscriptionsConnection!
  """The event for the given `id`."""
  event(
    """The event identifier."""
    id: String!
  ): Event
  """
  A page of events matching the specified criteria.
  
  The result list is returned in ascending stream date & time order.
  It starts from the earliest known event if no pagination arguments are provided.
  """
  events(
    """
    An opaque cursor to the earlier bounding event.
    
    Resulting events will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding event.
    
    Resulting events will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of events to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess events will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of events to return from the end of the list.
    
    Excess events will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `Event`-specific criteria to filter by."""
    filter: EventsFilterInput
    """
    The data source for the event.
    
    This commonly refers to a SEEK brand.
    See the relevant `Event` implementation for a list of supported schemes.
    """
    schemeId: String!
  ): EventsConnection!
}
"""The schema's entry-point for mutations. This acts as the public, top-level API from which all mutation queries must start."""
type Mutation {
  _empty: String
  """
  Creates a new questionnaire.
  
  This mutation accepts browser tokens that include the `mutate:questionnaires` scope.
  """
  createApplicationQuestionnaire(input: CreateApplicationQuestionnaireInput!): CreateApplicationQuestionnairePayload!
  """
  Creates a new position opening.
  
  Every position profile belongs to a position opening.
  Multiple position profiles may belong to the same position opening.
  """
  createPositionOpening(input: CreatePositionOpeningInput!): CreatePositionOpeningPayload!
  """Replaces an existing position opening's person contacts."""
  updatePositionOpeningPersonContacts(input: UpdatePositionOpeningPersonContactsInput!): UpdatePositionOpeningPersonContactsPayload
  """
  Update the status of a position opening.
  
  This status is provided to help hirers manage position openings.
  The SEEK API does not use the position opening's status itself.
  """
  updatePositionOpeningStatus(input: UpdatePositionOpeningStatusInput!): UpdatePositionOpeningStatusPayload
  """
  Deletes an empty position opening.
  
  Each position profile that belongs to a position opening must be deleted before the position opening can be deleted.
  """
  deletePositionOpening(input: DeletePositionOpeningInput!): DeletePositionOpeningPayload
  """Creates a new position profile for an opening and posts it."""
  postPositionProfileForOpening(input: PostPositionProfileForOpeningInput!): PostPositionProfileForOpeningPayload!
  """
  Updates an existing posted position profile.
  
  The position profile's existing fields will be replaced with the provided input fields.
  This will update the position's live job ad under its current URL.
  """
  updatePostedPositionProfile(input: UpdatePostedPositionProfileInput!): UpdatePostedPositionProfilePayload
  """
  Closes an existing posted position profile.
  
  The job ad will be removed from the job board and no refund will be issued.
  The `PositionProfile` and its associated candidate applications will be available for 6 months after its close date.
  """
  closePostedPositionProfile(input: ClosePostedPositionProfileInput!): ClosePostedPositionProfilePayload
  """Posts a live job ad for a new position."""
  postPosition(input: PostPositionInput!): PostPositionPayload!
  """Creates a new unposted position profile for an opening."""
  createUnpostedPositionProfileForOpening(input: CreateUnpostedPositionProfileForOpeningInput!): CreateUnpostedPositionProfileForOpeningPayload!
  """Updates an existing unposted position profile."""
  updateUnpostedPositionProfile(input: UpdateUnpostedPositionProfileInput!): UpdateUnpostedPositionProfilePayload
  """Deletes an unposted position profile."""
  deleteUnpostedPositionProfile(input: DeleteUnpostedPositionProfileInput!): DeleteUnpostedPositionProfilePayload
  """Creates a new webhook subscription."""
  createWebhookSubscription(input: CreateWebhookSubscriptionInput!): CreateWebhookSubscriptionPayload!
  """
  Updates an existing webhook subscription's delivery configuration.
  
  This modifies fields related to the URL, payload & signature of an existing webhook subscription.
  Changes may take up to half an hour to take effect.
  
  The fields that determine which events are to be delivered are immutable.
  A new webhook subscription should be created for such cases.
  """
  updateWebhookSubscriptionDeliveryConfiguration(input: UpdateWebhookSubscriptionDeliveryConfigurationInput!): UpdateWebhookSubscriptionDeliveryConfigurationPayload
  """Deletes an existing webhook subscription."""
  deleteWebhookSubscription(input: DeleteWebhookSubscriptionInput!): DeleteWebhookSubscriptionPayload
}
"""An address of a human-accessible web page."""
type WebUrl {
  """The URL of the web page."""
  url: String!
}
"""An email address."""
type Email {
  """The email address."""
  address: String!
}
"""An email address."""
input EmailInput {
  """The email address."""
  address: String!
}
"""The phone number of a person."""
type Phone {
  """The phone number represented as a human readable string."""
  formattedNumber: String!
}
"""The phone number of a person."""
input PhoneInput {
  """The phone number represented as a human readable string."""
  formattedNumber: String!
}
"""Communication channels for a person."""
type Communication {
  """
  An array of phone numbers for the person.
  
  The phone numbers are ordered in descending preference.
  """
  phone: [Phone!]!
  """
  An array of email addresses for the person.
  
  The email addresses are ordered in descending preference.
  """
  email: [Email!]!
}
"""Communication channels for a person."""
input CommunicationInput {
  """
  An array of phone numbers for the person.
  
  The phone numbers are ordered in descending preference.
  """
  phone: [PhoneInput!]!
  """
  An array of email addresses for the person.
  
  The email addresses are ordered in descending preference.
  """
  email: [EmailInput!]!
}
"""An address of a human-accessible web page."""
input WebUrlInput {
  """The URL of the web page."""
  url: String!
}
"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime
"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date
"""
A date string compliant with the ISO 8601 "year", "year and month" or "complete date" formats.
For example, `"2020"`, `"2020-05"` and `"2020-05-27"` are all valid for `HistoryDate`.

This is used for dates in a candidate's position & employment histories where the precise month or day may not have been provided.
"""
scalar HistoryDate
"""An opaque identifier for GraphQL objects."""
type ObjectIdentifier {
  """The identifier itself."""
  value: String!
}
"""
A monetary amount expressed as an integer in a specified minor currency unit.

This is used to avoid floating point rounding errors when expressing prices & funds.
"""
type Money {
  """
  The three-letter ISO 4217 currency code, in uppercase.
  
  This must be a supported currency. Currently supported codes are: `AUD`
  and `NZD`. Additional codes may be added in the future.
  """
  currencyCode: String!
  """
  A positive integer in the minor currency unit for the ISO currency code.
  
  This is the number of cents in dollar-denominated currencies e.g. 1000
  cents for $10.00.
  """
  amount: Int!
}
"""
Pagination metadata for a result list.

This is compliant with the _Relay Cursor Connections Specification_:

<https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo>
"""
type PageInfo {
  """Whether there is a previous page of results at the time of retrieval."""
  hasPreviousPage: Boolean!
  """Whether there is a next page of results at the time of retrieval."""
  hasNextPage: Boolean!
  """An opaque string cursor for retrieving the previous page of results."""
  startCursor: String
  """An opaque string cursor for retrieving the next page of results."""
  endCursor: String
}
"""
A set of questions presented to a candidate during an application.

This can be associated with one or more `PositionProfile`s when they are created.
"""
type ApplicationQuestionnaire {
  """An opaque identifier for the questionnaire."""
  id: ObjectIdentifier!
  """The array of components in the order they are presented to the candidate."""
  components: [ApplicationQuestionnaireComponent!]!
}
"""
A component of an application questionnaire.

This only contains identifying metadata;
the `componentTypeCode` can be used to determine the concrete type of the component.
"""
interface ApplicationQuestionnaireComponent {
  """An opaque identifier for the component."""
  id: ObjectIdentifier!
  """
  The type of the component. Currently, this can be:
  
  - "Question" which corresponds to the `ApplicationQuestion` type.
  - "PrivacyConsent" which corresponds to the `ApplicationPrivacyConsent` type.
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the component.
  
  This can be used to correlate the component with the submission.
  """
  value: String
}
"""
A question component of an `ApplicationQuestionnaire`.

This consists of label text displayed to a user and an input for them to select a response.
"""
type ApplicationQuestion implements ApplicationQuestionnaireComponent {
  """An opaque identifier for the question."""
  id: ObjectIdentifier!
  """
  The type of the component.
  
  This is always "Question".
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the question.
  
  This can be used to correlate the question with the submitted question components.
  """
  value: String
  """
  The HTML snippet of the question being asked to the candidate.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  """
  questionHtml: String!
  """
  The type of the question response.
  
  The three possible values of this are:
  
  - "SingleSelect" for choosing a single response from `responseChoice`.
  - "MultiSelect" for choosing one or more responses from `responseChoice`.
  - "FreeText" for a free text response.
  """
  responseTypeCode: String!
  """
  The collection of possible responses.
  
  For "SingleSelect" and "MultiSelect" this must contain at least one element.
  """
  responseChoice: [ApplicationQuestionChoice!]
}
"""
A privacy policy consent component of an `ApplicationQuestionnaire`.

This consists of a URL for candidates to view the privacy policy and text to prompt the candidate as to whether or not they agree.

The privacy policy consent component presents the candidate with a 'Yes' or 'No' choice.
"""
type ApplicationPrivacyConsent implements ApplicationQuestionnaireComponent {
  """An opaque identifier for the question."""
  id: ObjectIdentifier!
  """
  The type of the component.
  
  This is always "PrivacyConsent".
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the question.
  
  This can be used to correlate the question with the submitted question components.
  """
  value: String
  """The URL of the privacy policy to show to the candidate."""
  privacyPolicyUrl: WebUrl!
  """
  The HTML snippet to prompt the candidate for consent.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  
  This is optional and will default to 'Do you agree to the privacy policy?'
  """
  descriptionHtml: String
}
"""A possible response to an `ApplicationQuestion`."""
type ApplicationQuestionChoice {
  """An opaque identifier for the question choice."""
  id: ObjectIdentifier!
  """Text of the choice displayed to the candidate."""
  text: String!
  """
  A partner provided unique reference ID to the question choice.
  
  This can be used to correlate the question with the submitted answers.
  """
  value: String
  """
  Indicates if this choice is preferred when scoring the answers.
  
  This is not displayed to the candidate.
  """
  preferredIndicator: Boolean!
}
"""
A response to a component in a questionnaire.

This only contains metadata related to the component responded to in the questionnaire.
The implementation of a response is based on the `componentTypeCode` of its component.
"""
interface ApplicationQuestionnaireComponentResponse {
  """The component this is responding to."""
  component: ApplicationQuestionnaireComponent!
  """
  The type of the component. Currently, this can be:
  
  - "Question" which corresponds to the `ApplicationQuestion` type.
  - "PrivacyConsent" which corresponds to the `ApplicationPrivacyConsent` type.
  """
  componentTypeCode: String!
}
"""A single answer to a question in the questionnaire."""
type ApplicationQuestionAnswer {
  """
  The questionnaire choice for the current answer.
  
  For `FreeText` questions this will be `null`.
  """
  choice: ApplicationQuestionChoice
  """The text value of the selected answer."""
  answer: String!
}
"""A candidate's response to a question in the questionnaire."""
type ApplicationQuestionResponse implements ApplicationQuestionnaireComponentResponse {
  """The question this is responding to."""
  component: ApplicationQuestion!
  """
  The type of the component.
  
  This is always "Question".
  """
  componentTypeCode: String!
  """
  The answers provided by the candidate.
  
  For "SingleSelect" and "FreeText" this will be a single element array.
  """
  answers: [ApplicationQuestionAnswer!]!
  """
  How well the candidate answered the question against the hirer's preferences.
  
  Score is calculated based off the `responseTypeCode`:
  - For a `SingleSelect` question the score will be either 1 or 0 based off whether or not the candidate selected a preferred answer.
  - For a `MultiSelect` question the score will be between 0 and 1 as a floating point. For example, if the candidate selected half of the preferred answers, the score would be 0.5.
  - For a `FreeText` the score will be null.
  """
  score: Float
}
"""A candidate's response to a privacy policy consent component in the questionnaire."""
type ApplicationPrivacyConsentResponse implements ApplicationQuestionnaireComponentResponse {
  """The privacy consent component this is responding to."""
  component: ApplicationPrivacyConsent!
  """
  The type of the component.
  
  This is always "PrivacyConsent".
  """
  componentTypeCode: String!
  """This indicates whether or not the candidate agrees to the provided privacy policy."""
  consentGivenIndicator: Boolean!
}
"""A completed candidate submission for an `ApplicationQuestionnaire`."""
type ApplicationQuestionnaireSubmission {
  """The set of questions presented to the candidate during the application."""
  questionnaire: ApplicationQuestionnaire!
  """The candidate's responses to the application's questionnaire."""
  responses: [ApplicationQuestionnaireComponentResponse!]!
  """
  The indication of how well the candidate scored on all questions in the questionnaire.
  
  The score is a calculation between 0 and 1 as a floating point.
  For example, if the candidate received a score of 1 on one question, and a score of 0 on another, this overall score would be calculated as 0.5.
  If there are no scored questions this score will be null.
  """
  score: Float
}
"""
A privacy policy consent component of an `ApplicationQuestionnaire`.

This consists of a URL for candidates to view the privacy policy and text to prompt the candidate as to whether or not they agree.

The privacy policy consent component always defaults the available response choices for the candidate to 'Yes' and 'No'.
"""
input ApplicationPrivacyConsentInput {
  """
  The type of the component.
  
  This is always "PrivacyConsent".
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the consent component.
  
  This can be used to correlate the consent component with the submitted response.
  """
  value: String
  """The URL of the privacy policy to show to the candidate."""
  privacyPolicyUrl: WebUrlInput!
  """
  The HTML snippet to prompt the candidate for consent.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  
  This is optional and will default to 'Do you agree to the privacy policy?'
  """
  descriptionHtml: String
}
"""
A question component of an `ApplicationQuestionnaire`.

This consists of label text displayed to a user and an input for them to select a response.
"""
input ApplicationQuestionInput {
  """
  The type of the component.
  
  This is always "Question".
  """
  componentTypeCode: String!
  """
  The HTML snippet of the question being asked to the candidate.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  """
  questionHtml: String!
  """
  The type of the question response.
  
  The three possible values of this are:
  
  - "SingleSelect" for choosing a single response from `responseChoice`.
  - "MultiSelect" for choosing one or more responses from `responseChoice`.
  - "FreeText" for a free text response.
  """
  responseTypeCode: String!
  """
  A unique ID for this question.
  
  This can be used to correlate the question with the provided answers.
  This must be unique within the questionnaire.
  """
  value: String!
  """
  The collection of possible responses.
  
  For "SingleSelect" and "MultiSelect" this must contain at least one element.
  """
  responseChoice: [ApplicationQuestionChoiceInput!]
}
"""A possible response to an `ApplicationQuestion`."""
input ApplicationQuestionChoiceInput {
  """Text of the choice displayed to the candidate."""
  text: String!
  """
  A unique ID for this choice.
  
  This can be used to correlate the choice with the provided answers.
  This must be unique within the questionnaire.
  """
  value: String!
  """
  Indicates if this choice is preferred when scoring the answers.
  
  This is not displayed to the candidate.
  """
  preferredIndicator: Boolean!
}
"""A component of the questionnaire to be created."""
input ApplicationQuestionnaireComponentInput {
  """
  The type of the component. Currently, this can be:
  
  - "Question" which corresponds to the `question` property.
  - "PrivacyConsent" which corresponds to the `privacyConsent` property.
  """
  componentTypeCode: String!
  """
  A question component of an `ApplicationQuestionnaire`.
  
  This must be provided if the `componentTypeCode` is `Question`.
  """
  question: ApplicationQuestionInput
  """
  A privacy consent component of an `ApplicationQuestionnaire`.
  
  This must be provided if the `componentTypeCode` is `PrivacyConsent`.
  """
  privacyConsent: ApplicationPrivacyConsentInput
}
"""The details of the questionnaire to be created."""
input CreateApplicationQuestionnaire_ApplicationQuestionnaireInput {
  """
  The identifier for the hirer that will own the questionnaire.
  
  Hirers can only associate position profiles with questionnaires they own.
  """
  hirerId: String!
  """The array of components in the order they are presented to the candidate."""
  components: [ApplicationQuestionnaireComponentInput!]!
}
"""The input parameter for the `createApplicationQuestionnaire` mutation."""
input CreateApplicationQuestionnaireInput {
  """The details of the questionnaire to be created."""
  applicationQuestionnaire: CreateApplicationQuestionnaire_ApplicationQuestionnaireInput!
}
"""The output parameter for the `createApplicationQuestionnaire` mutation."""
type CreateApplicationQuestionnairePayload {
  """The details of the created questionnaire."""
  applicationQuestionnaire: ApplicationQuestionnaire!
}
"""The types of ads which can be placed."""
enum AdvertisementType {
  """A standard ad."""
  CLASSIC
  """Ad with branding."""
  STANDOUT
  """Featured ad"""
  PREMIUM
}
type AdProduct {
  """The type of the ad product."""
  advertisementType: AdvertisementType!
  """The name of the ad product."""
  name: String!
  """The description of the ad product."""
  description: String!
  """The price component of the ad product."""
  price: AdProductPrice!
  """Whether the ad product is enabled."""
  enabled: Boolean!
  """How the ad product would be paid."""
  checkoutEstimate: AdProductCheckoutEstimate!
  """Disclosures related to the ad product."""
  disclosures: [Disclosure!]!
  """Information messages"""
  messages: [String!]!
}
type AdProductPrice {
  """The product price without tax"""
  amountExcludingTax: Money
  """Descriptive summary of the Product Price"""
  summary: String!
  """Indicates whether the price can be shown to the hirer"""
  canBeShownToHirer: Boolean!
  """Specifies whether taxes will be added when purchased."""
  taxable: Boolean!
}
type AdProductCheckoutEstimate {
  """The amount left to be paid."""
  paymentDueExcludingTax: Money
  """Checkout estimate summary"""
  summary: String!
  """Contract component of the checkout estimate"""
  contractConsumption: AdProductContractConsumption
}
type AdProductContractConsumption {
  """Summary of contract consumption"""
  summary: String!
  """Type of contract consumption."""
  type: AdProductContractConsumptionType!
}
input AdProductAdvertisementInput {
  """The type of the ad product. Classic, StandOut or Premium"""
  type: AdvertisementType!
  """The advertisement identifier."""
  id: String
  """The hirer's job reference"""
  hirerJobReference: String
  """The position title"""
  positionTitle: String!
  """The job category identifier"""
  jobCategoryId: String!
  """The position location identifier"""
  positionLocationId: String!
}
input AdProductAdvertisementDraftInput {
  """The type of the ad product. Classic, StandOut or Premium"""
  type: AdvertisementType
  """The advertisement identifier."""
  id: String
  """The hirer's job reference"""
  hirerJobReference: String
  """The position title"""
  positionTitle: String
  """The job category identifier"""
  jobCategoryId: String
  """The position location identifer"""
  positionLocationId: String
}
enum AdProductContractConsumptionType {
  """A contract will be consumed of the same ad type as the product."""
  SAME_ADTYPE
  """A contract will be consumed of a different ad type than the product."""
  OTHER_ADTYPE
  """A contract will be consumed of the same ad type as the product and an invoice will be generated."""
  SAME_ADTYPE_PLUS_INVOICE
}
"""A disclosure shown to the hirer for the current ad product."""
type Disclosure {
  """The type of the disclosure message."""
  type: DisclosureType!
  """The content of the disclosure message."""
  message: String!
}
"""The type of disclosure message."""
enum DisclosureType {
  """A disclosure relating to a pricing error."""
  PRICING_ERROR
  """A disclosure relating to an impact on premium ad performance."""
  PREMIUM_PERFORMANCE_CHANGE
  """A disclosure relating to a price increase in update mode for SEEK contracts."""
  UPDATE_PRICING_INCREASE
}
type SeekAnzAdProduct {
  """
  The type of the ad product.
  
  Currently, three codes are defined:
  - `Classic` indicates a Classic ad.
  - `StandOut` indicates a StandOut ad.
  - `Premium` indicates a Premium ad.
  """
  advertisementTypeCode: String!
  """The ad product name."""
  name: String!
  """The description of the ad product."""
  description: String!
  """The price component of the ad product."""
  price: SeekAnzAdProductPrice!
  """Indicates whether the ad product is enabled."""
  enabledIndicator: Boolean!
  """How the ad product would be paid."""
  checkoutEstimate: SeekAnzAdProductCheckoutEstimate!
  """Messages that may be shown to hirer."""
  messages: [SeekAnzAdProductMessage!]!
}
type SeekAnzAdProductPrice {
  """The product price without tax"""
  amountExcludingTax: CurrencyMinorUnit
  """Descriptive summary of the Product Price"""
  summary: String!
  """Indicates whether the price can be shown to the hirer"""
  visibleForHirerIndicator: Boolean!
  """Indicates whether taxes will be added when purchased."""
  taxedIndicator: Boolean!
}
type SeekAnzAdProductCheckoutEstimate {
  """The amount left to be paid."""
  paymentDueExcludingTax: CurrencyMinorUnit
  """Checkout estimate summary"""
  summary: String!
  """Contract component of the checkout estimate"""
  contractConsumption: SeekAnzAdProductContractConsumption
}
type SeekAnzAdProductContractConsumption {
  """Summary of contract consumption"""
  summary: String!
  """
  Type of contract consumption.
  
  Currently, three codes are defined:
  - `SameAdType` indicates payment due will be consumed from a contract of the same ad type as this product.
  - `OtherAdType` indicates payment due will be consumed from a contract of a different ad type to this product.
  - `SameAdTypePlusInvoice` indicates payment due will be consumed from a contract of the same ad type as this product and an invoice will be generated.
  """
  typeCode: String!
}
input SeekAnzAdProductAdvertisementInput {
  """
  The type of ad product.
  
  Currently, three codes are defined:
  - `Classic` indicates a Classic ad.
  - `StandOut` indicates a StandOut ad.
  - `Premium` indicates a Premium ad.
  """
  typeCode: String!
  """The advertisement identifier."""
  id: String
  """The hirer's job reference"""
  hirerJobReference: String
  """The position title"""
  positionTitle: String!
  """The job category identifier"""
  jobCategoryId: String!
  """The position location identifier"""
  positionLocationId: String!
}
input SeekAnzAdProductAdvertisementDraftInput {
  """
  The type of ad product.
  
  Currently, three codes are defined:
  - `Classic` indicates a Classic ad.
  - `StandOut` indicates a StandOut ad.
  - `Premium` indicates a Premium ad.
  """
  typeCode: String
  """The advertisement identifier."""
  id: String
  """The hirer's job reference"""
  hirerJobReference: String
  """The position title"""
  positionTitle: String
  """The job category identifier"""
  jobCategoryId: String
  """The position location identifer"""
  positionLocationId: String
}
"""A message shown to the hirer for the current ad product."""
type SeekAnzAdProductMessage {
  """
  The severity of the message.
  
  Currently, two codes are defined:
  - `Informational` indicates a message with helpful information for a hirer.
  - `Critical` indicates a message with critical information for a hirer.
  """
  severityCode: String!
  """The content of the message."""
  content: String!
}
"""
A monetary amount expressed as an integer in a specified minor currency unit.

This is used to avoid floating point rounding errors when expressing prices & funds.
"""
type CurrencyMinorUnit {
  """
  A non-negative integer in the minor currency unit for the ISO currency code.
  
  For example, this is the number of cents in dollar-denominated currencies.
  """
  value: Int!
  """The three-letter ISO 4217 currency code, in uppercase."""
  currency: String!
}
"""The name of a person including a breakdown of name components."""
type PersonName {
  """The formatted name of a person, as it would be written out together."""
  formattedName: String!
  """The given name of a person, if provided."""
  given: String
  """The family name (or surname) of a person, if provided."""
  family: String
}
"""A reference to a person associated with an object."""
type SpecifiedPerson {
  """The person's name"""
  name: PersonName
  """Methods of communication with the person."""
  communication: Communication!
  """
  The role of the person.
  
  Currently, two codes are defined:
  - `Recruiter` indicates a person recruiting for the position.
  - `HiringManager` indicates an employee that requested the position to be filled.
  """
  roleCode: String
}
"""The name of a person associated with an object."""
input PersonNameInput {
  """The formatted name of a person, as it would be written out together."""
  formattedName: String!
  """The optional given name of a person."""
  given: String
  """The optional family name (or surname) of a person."""
  family: String
}
"""A reference to a person associated with an object."""
input SpecifiedPersonInput {
  """The person's name."""
  name: PersonNameInput
  """Methods of communication with the person."""
  communication: CommunicationInput!
  """
  The role of the person.
  
  Currently, two codes are defined:
  - `Recruiter` indicates a person recruiting for the position.
  - `HiringManager` indicates an employee that requested the position to be filled.
  """
  roleCode: String
}
"""A method of applying to a position."""
input ApplicationMethodInput {
  """
  A URL of an external application form.
  
  When this is provided, SEEK's native apply form will be disabled and the candidate will be redirected to the supplied URL.
  """
  applicationUri: WebUrlInput
  """
  The email address to direct candidate applications to.
  
  This is deprecated; Do not use this field. This has been replaced by application export.
  """
  applicationEmail: EmailInput
}
"""The input parameter for the `closePostedPositionProfile` mutation."""
input ClosePostedPositionProfileInput {
  """The details of the position profile to be closed."""
  positionProfile: ClosePostedPositionProfile_PositionProfileInput!
}
"""The details of the position profile to be closed."""
input ClosePostedPositionProfile_PositionProfileInput {
  """The unique identifier for the posted position profile."""
  profileId: String!
}
"""A collection of information about where and how to post a job ad."""
input CreatePostingInstructionInput {
  """
  A SEEK ANZ advertisement type code.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic advertisement.
  - `StandOut` indicates a StandOut advertisement.
  - `Premium` indicates a Premium advertisement.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is required.
  - For other schemes, set this to `null`.
  """
  seekAnzAdvertisementType: String
  """
  The end date of the posting.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme this must be no more than 30 days in the future.
    If the end date is not specified it will default to the maximum period of 30 days.
  """
  end: DateTime
  """
  An identifier to ensure that multiple ads are not created on retries.
  
  The identifier should be unique in the partner system for each position profile created.
  The same identifier must be provided when retrying after create failures.
  """
  idempotencyId: String!
  """
  An array of methods for applying to the position.
  
  If no methods are provided, SEEK's native apply form will be used to receive candidate applications.
  Native applications will raise a `CandidateApplicationCreated` event that points to a `CandidateProfile` object.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is limited to a single element. Requests with more than 1 element will fail.
  """
  applicationMethods: [ApplicationMethodInput!]
  """The identifier of the branding to apply to the posted job ad."""
  brandingId: String
}
"""A formatted description of the position profile."""
input PositionFormattedDescriptionInput {
  """
  The description type.
  
  Currently, four description identifiers are defined:
  1. `AdvertisementDetails` is the detailed description of the position that appears on the job ad.
  2. `ContactDetails` is a free-text description of a contact person for the position.
     The use of this field is discouraged in SEEK ANZ but it is still used by certain advertisement templates.
  3. `SearchBulletPoint` is a highlight or selling point of the position that appears in search results.
     SEEK ANZ allows up to three search bullet points for Premium or StandOut ad products.
  4. `SearchSummary` is a short description that appears in search results.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires `AdvertisementDetails` and `SearchSummary` to be included and non-empty.
  """
  descriptionId: String!
  """The HTML content of the description."""
  content: String!
}
"""The input parameter for the `createPositionOpening` mutation."""
input CreatePositionOpeningInput {
  """The details of the position opening to be created."""
  positionOpening: CreatePositionOpening_PositionOpeningInput!
}
"""The details of the position opening to be created."""
input CreatePositionOpening_PositionOpeningInput {
  """The party that owns the position opening."""
  postingRequester: PostingRequesterInput!
  """
  The status of the position opening.
  
  Defaults to `Active` if no value is provided.
  
  Currently three codes are defined:
  - `Incomplete` indicates the position opening is in draft.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String
}
"""The input parameter for the `updatePositionOpeningPersonContacts` mutation."""
input UpdatePositionOpeningPersonContactsInput {
  """The details of the position opening to be updated."""
  positionOpening: UpdatePositionOpeningPersonContactsPositionOpeningInput!
}
"""The details of the position opening to be updated."""
input UpdatePositionOpeningPersonContactsPositionOpeningInput {
  """The unique identifier for the position opening to update."""
  documentId: String!
  """Specific contact people for the position opening at the party."""
  personContacts: [SpecifiedPersonInput!]!
}
"""The input parameter for the `updatePositionOpeningStatus` mutation."""
input UpdatePositionOpeningStatusInput {
  """The details of the position opening to be updated."""
  positionOpening: UpdatePositionOpeningStatusPositionOpeningInput!
}
"""The details of the position opening to have its status updated."""
input UpdatePositionOpeningStatusPositionOpeningInput {
  """The unique identifier for the position opening to update."""
  documentId: String!
  """
  The status of the position opening.
  
  Currently three codes are defined:
  - `Incomplete` indicates the position opening is in a draft state.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String!
}
"""The input parameter for the `deletePositionOpening` mutation."""
input DeletePositionOpeningInput {
  """The details of the position opening to be deleted."""
  positionOpening: DeletePositionOpening_PositionOpeningInput!
}
"""The details of the position opening to be deleted."""
input DeletePositionOpening_PositionOpeningInput {
  """The unique identifier for the position opening."""
  documentId: String!
}
"""
The party that owns the position opening.

This may be different from the hiring organization if the position opening is created by a recruitment agency.
"""
input PostingRequesterInput {
  """An opaque identifier for hirer or agency owning the position opening."""
  id: String!
  """
  The role of the owner of the position opening.
  
  Currently two codes are defined:
  - `Agency` indicates a recruitment agency hiring on behalf of another company.
  - `Company` indicates a company hiring on behalf of themselves.
  """
  roleCode: String!
  """Specific contact people for the position opening at the party."""
  personContacts: [SpecifiedPersonInput!]!
}
"""The information required to post a job ad for a newly created position."""
input PostPositionInput {
  """The details of the position opening to be created."""
  positionOpening: CreatePositionOpening_PositionOpeningInput!
  """A profile of a position opening."""
  positionProfile: PostPosition_PositionProfileInput!
}
input PostPosition_PositionProfileInput {
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """
  An array of identifiers for the organizations that have the position.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionOrganizations: [String!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  For the `seekAnz` scheme, this field is not supported and should be set to `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  A SEEK ANZ work type code.
  
  For positions in `seekAnz` scheme, this field is used instead of `positionScheduleTypeCodes`.
  
  Currently, four work type codes are defined:
  
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `Casual` indicates a casual position.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme when `postingInstructions` are provided.
  - Set to `null` for other schemes.
  """
  seekAnzWorkTypeCode: String
  """
  An array of `JobCategory` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionLocation: [String!]!
  """
  The identifier of the questionnaire with the set of questions to present to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaireId: String
  """The video to render within the advertisement."""
  seekVideo: SeekVideoInput
  """
  The instructions related to posting the job ad.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  postingInstructions: [CreatePostingInstructionInput!]!
}
"""The input parameter for the `postPositionProfileForOpening` mutation."""
input PostPositionProfileForOpeningInput {
  """
  A profile for posting a job ad against an existing position opening.
  
  This contains information of how a position opening is presented on a given channel or job board.
  """
  positionProfile: PostPositionProfileForOpeningPositionProfileInput!
}
"""
A profile for posting a job ad against an existing position opening.

This contains information of how a position opening is presented on a given channel or job board.
"""
input PostPositionProfileForOpeningPositionProfileInput {
  """The identifier of the position opening that this position profile belongs to."""
  positionOpeningId: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """
  An array of identifiers for the organizations that have the position.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionOrganizations: [String!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  For the `seekAnz` scheme, this field is not supported and should be set to `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  A SEEK ANZ work type code.
  
  For positions in `seekAnz` scheme, this field is used instead of `positionScheduleTypeCodes`.
  
  Currently, four work type codes are defined:
  
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `Casual` indicates a casual position.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme when `postingInstructions` are provided.
  - Set to `null` for other schemes.
  """
  seekAnzWorkTypeCode: String
  """
  An array of `JobCategory` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionLocation: [String!]!
  """
  The identifier of the questionnaire with the set of questions to present to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaireId: String
  """The video to render within the advertisement."""
  seekVideo: SeekVideoInput
  """
  The instructions related to posting the job ad.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  postingInstructions: [CreatePostingInstructionInput!]!
}
"""The salary or compensation for a position."""
input RemunerationPackageInput {
  """
  A code classifying the primary method of payment for a position.
  
  Currently, four basis codes are defined:
  
  1. `Hourly` employment is paid for the number of hours worked.
  2. `Salaried` employment is paid on an annual basis.
  3. `SalariedPlusCommission` employment is paid on an annual basis plus a results-based commission.
  4. `CommissionOnly` employment is paid exclusively a results-based commission.
  """
  basisCode: String!
  """
  An array of offered salary ranges.
  
  Scheme requirements:
  
  - The `seekAnz` scheme is limited to a single element containing the amount for the `basisCode`.
  """
  ranges: [RemunerationRangeInput!]!
  """Human readable descriptions of the remuneration package."""
  descriptions: [String!]!
}
"""A salary or compensation range for a position."""
input RemunerationRangeInput {
  """The minimum amount an organization is willing to pay for a position."""
  minimumAmount: RemunerationAmountInput!
  """
  The maximum amount an organization is willing to pay for a position.
  
  A `null` value indicates the organization has not specified an upper bound for the range.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme when `postingInstructions` are provided.
  """
  maximumAmount: RemunerationAmountInput
  """
  The interval the remuneration amounts are calculated over.
  
  Currently two interval codes are defined:
  
  - `Hour` is used to express hourly rates.
  - `Year` is used to express annual salaries or commissions.
  """
  intervalCode: String!
}
"""A monetary amount of remuneration in a specified currency."""
input RemunerationAmountInput {
  """
  A non-negative float in the major currency unit for the ISO currency code.
  
  For example, this is the number of dollars in dollar-denominated currencies.
  """
  value: Float!
  """The three-letter ISO 4217 currency code, in uppercase."""
  currency: String!
}
"""The input parameter for the `createUnpostedPositionProfile` mutation."""
input CreateUnpostedPositionProfileForOpeningInput {
  """An unposted profile of a position opening to create."""
  positionProfile: CreateUnpostedPositionProfileForOpeningPositionProfileInput!
}
"""An unposted profile of a position opening to create."""
input CreateUnpostedPositionProfileForOpeningPositionProfileInput {
  """The identifier of the position opening that this position profile belongs to."""
  positionOpeningId: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """An array of identifiers for the organizations that have the position."""
  positionOrganizations: [String!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """An optional agency-provided opaque job reference."""
  seekAgencyJobReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """An array of `JobCategory` identifiers."""
  jobCategories: [String!]!
  """An array of `Location` identifiers."""
  positionLocation: [String!]!
}
"""The input parameter for the `updateUnpostedPositionProfile` mutation."""
input UpdateUnpostedPositionProfileInput {
  """An unposted profile of a position opening to update."""
  positionProfile: UpdateUnpostedPositionProfile_PositionProfileInput!
}
"""An unposted profile of a position opening to update."""
input UpdateUnpostedPositionProfile_PositionProfileInput {
  """The identifier of the unposted position profile to update."""
  profileId: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """An array of identifiers for the organizations that have the position."""
  positionOrganizations: [String!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """An optional agency-provided opaque job reference."""
  seekAgencyJobReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """An array of `JobCategory` identifiers."""
  jobCategories: [String!]!
  """An array of `Location` identifiers."""
  positionLocation: [String!]!
}
"""The input parameter for the `deleteUnpostedPositionProfile` mutation."""
input DeleteUnpostedPositionProfileInput {
  """The details of the unposted position profile to be deleted."""
  positionProfile: DeleteUnpostedPositionProfile_PositionProfileInput!
}
"""The details of the unposted position profile to be deleted."""
input DeleteUnpostedPositionProfile_PositionProfileInput {
  """The unique identifier for the unposted position profile."""
  profileId: String!
}
"""The input parameter for the `updatePostedPositionProfile` mutation."""
input UpdatePostedPositionProfileInput {
  """The values to replace on a posted position profile."""
  positionProfile: UpdatePostedPositionProfile_PositionProfileInput!
}
"""The values to replace on a posted position profile."""
input UpdatePostedPositionProfile_PositionProfileInput {
  """The identifier of the posted position profile to update."""
  profileId: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """
  An array of identifiers for the organizations that have the position.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionOrganizations: [String!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  For the `seekAnz` scheme, this field is not supported and should be set to `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  A SEEK ANZ work type code.
  
  For positions in `seekAnz` scheme, this field is used instead of `positionScheduleTypeCodes`.
  
  Currently, four work type codes are defined:
  
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `Casual` indicates a casual position.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme when `postingInstructions` are provided.
  - Set to `null` for other schemes.
  """
  seekAnzWorkTypeCode: String
  """
  An array of `JobCategory` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionLocation: [String!]!
  """
  The identifier of the questionnaire with the set of questions to present to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is ignored.
  """
  seekApplicationQuestionnaireId: String
  """The video to render within the advertisement."""
  seekVideo: SeekVideoInput
  """
  The instructions related to posting the job ad.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  postingInstructions: [UpdatePostingInstructionInput!]!
}
"""A collection of information about where and how to post a job ad."""
input UpdatePostingInstructionInput {
  """
  A SEEK ANZ advertisement type code.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic advertisement.
  - `StandOut` indicates a StandOut advertisement.
  - `Premium` indicates a Premium advertisement.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is required.
  - For other schemes, set this to `null`.
  """
  seekAnzAdvertisementType: String
  """The end date of the posting."""
  end: DateTime
  """
  An array of methods for applying to the position.
  
  If no methods are provided, SEEK's native apply form will be used to receive candidate applications.
  Native applications will raise a `CandidateApplicationCreated` event that points to a `CandidateProfile` object.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is limited to a single element. Requests with more than 1 element will fail.
  """
  applicationMethods: [ApplicationMethodInput!]
  """The identifier of the branding to apply to the posted job ad."""
  brandingId: String
}
"""A collection of information about the video to display alongside advertisement details."""
input SeekVideoInput {
  """
  The URL of the video to display.
  
  Scheme requirements:
  
   - The `seekAnz` scheme requires URLs to be YouTube embed URLs less than 255 characters e.g. `https://www.youtube.com/embed/aAgePQvHBQM`.
  """
  url: String!
  """
  The position relative to the advertisement details where the video should be rendered.
  
  Currently, two codes are defined:
  
  - `Above` indicates the video will render above the advertisement details.
  - `Below` indicates the video will render below the advertisement details.
  """
  seekAnzPositionCode: String
}
"""
The category of a job's occupation.

This query accepts browser tokens that include the `query:ontologies` scope.
"""
type JobCategory {
  """An opaque identifier for the job category."""
  id: ObjectIdentifier!
  """
  The parent job category.
  
  This is a more general classification that this category belongs to.
  It will be `null` for root categories that do not belong to a more general classification.
  """
  parent: JobCategory
  """
  An array of child job categories.
  
  These are more specific categories that belong to this general classification.
  """
  children: [JobCategory!]
  """Name of the job category."""
  name: String!
}
"""A job category with information of the suggested choice."""
type JobCategorySuggestionChoice {
  """The job category information of the suggestion choice."""
  jobCategory: JobCategory!
  """
  A floating point value ranging from 0 (lowest) to 1 (highest)
  that indicates confidence of the job category returned based on the suggestion input.
  """
  confidence: Float!
}
"""The input parameter for the `jobCategorySuggestions` query."""
input JobCategorySuggestionPositionProfileInput {
  """The position title."""
  positionTitle: String!
  """An array of location identifiers of the position."""
  positionLocation: [String!]!
  """
  An array of identifiers for the organizations that have the position.
  
  Information such as the organization's domicile can be used to refine the returned suggestions.
  """
  positionOrganizations: [String!]
  """
  The descriptions for the position profile.
  
  Currently, only the `AdvertisementDetails` description is used. Other
  descriptions will be accepted but are ignored when determining the
  relevance of suggestion.
  """
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]
}
type Location {
  """An opaque identifier of the location."""
  id: ObjectIdentifier!
  """The parent location."""
  parent: Location
  """An array of child locations."""
  children: [Location!]
  """The location name."""
  name: String!
  """Contextual name of the location."""
  contextualName: String!
  """The two-letter ISO 3166-1:2013 country code, in uppercase."""
  countryCode: String!
}
type LocationSuggestion {
  """Location information of the choice."""
  location: Location!
}
"""A geographical coordinate."""
input GeoLocationInput {
  """The latitude of the geographical location."""
  latitude: Float!
  """The longitude of the geographical location."""
  longitude: Float!
}
"""An organization hiring for an open position."""
type HiringOrganization {
  """The opaque identifier of the hiring organization."""
  id: ObjectIdentifier!
  """The name of the hiring organization."""
  name: String!
  """
  The legacy SEEK ANZ advertiser ID.
  
  This is a numeric identifier used by SEEK ANZ's legacy Job Posting & Application Export APIs.
  For organizations in other schemes this will be `null`.
  """
  seekAnzAdvertiserId: Int
}
"""
Advertisement branding.

This can be associated with one or more `PositionProfile`s when they are created.
"""
type AdvertisementBranding {
  """An opaque identifier for advertisement branding."""
  id: ObjectIdentifier!
  """The advertisement branding name."""
  name: String!
  """A list of images associated with the advertisement branding."""
  images: [AdvertisementBrandingImage!]!
  """The organization that has the advertisement branding."""
  hirer: HiringOrganization!
}
"""A visual representation of advertisement branding."""
type AdvertisementBrandingImage {
  """
  The type of advertisement branding image.
  
  Currently, only one code is defined:
  - `OriginalLogo` indicates the original advertisement branding logo image from which other logo images are derived.
  """
  typeCode: String!
  """
  The URL of the advertisement branding image.
  
  This can be retrieved to visually identify an advertisement branding in a partner system.
  """
  url: String!
}
"""A page of advertisement brandings for a hirer."""
type AdvertisementBrandingsConnection {
  """
  The page of advertisement brandings and their corresponding cursors.
  
  This list may be empty.
  """
  edges: [AdvertisementBrandingEdge!]!
  """The pagination metadata for this page of advertisement brandings."""
  pageInfo: PageInfo!
}
type AdvertisementBrandingEdge {
  """
  The opaque cursor to advertisement branding.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual advertisement branding."""
  node: AdvertisementBranding!
}
"""The output parameter for the `createPositionOpening` mutation."""
type CreatePositionOpeningPayload {
  """The details of the created position opening."""
  positionOpening: PositionOpening!
}
"""The output parameter for the `postPositionProfileForOpening` mutation."""
type PostPositionProfileForOpeningPayload {
  """Attributes of the newly created position profile."""
  positionProfile: PostPositionProfileForOpening_PositionProfilePayload!
}
type PostPositionProfileForOpening_PositionProfilePayload {
  """The identifier for the created position profile."""
  profileId: ObjectIdentifier!
}
"""The output parameter for the `postPosition` mutation."""
type PostPositionPayload {
  """Attributes of the newly created position opening."""
  positionOpening: PostPosition_PositionOpeningPayload!
  """Attributes of the newly created position profile."""
  positionProfile: PostPosition_PositionProfilePayload!
}
type PostPosition_PositionOpeningPayload {
  """
  The identifier for the created position opening.
  
  Scheme restrictions:
  
  - The `seekAnz` scheme creates the position opening asynchronously.
    This identifier will initially reference an missing object;
    the object should be created within a few minutes.
  """
  documentId: ObjectIdentifier!
}
type PostPosition_PositionProfilePayload {
  """
  The identifier for the created position profile.
  
  Scheme restrictions:
  
  - The `seekAnz` scheme creates the position profile asynchronously.
    This identifier will initially reference an missing object;
    the object should be created within a few minutes.
  """
  profileId: ObjectIdentifier!
}
"""The output parameter for the `UpdatePositionOpeningStatus` mutation."""
type UpdatePositionOpeningStatusPayload {
  """The details of the updated position opening."""
  positionOpening: PositionOpening!
}
"""The output parameter for the `createUnpostedPositionProfileForOpening` mutation."""
type CreateUnpostedPositionProfileForOpeningPayload {
  """Attributes of the newly created unposted position profile."""
  unpostedPositionProfile: PositionProfile!
}
"""The output parameter for the `updatePositionOpeningPersonContacts` mutation."""
type UpdatePositionOpeningPersonContactsPayload {
  """The details of the updated position opening."""
  positionOpening: PositionOpening!
}
"""The output of the `updatePostedPositionProfile` mutation."""
type UpdatePostedPositionProfilePayload {
  """Attributes of the updated position profile."""
  positionProfile: UpdatePostedPositionProfile_PositionProfilePayload!
}
"""Attributes of the updated position profile."""
type UpdatePostedPositionProfile_PositionProfilePayload {
  """The identifier of the updated posted position profile."""
  profileId: ObjectIdentifier!
}
"""The output of the `closePostedPositionProfile` mutation."""
type ClosePostedPositionProfilePayload {
  """Attributes of the closed position profile."""
  positionProfile: ClosePostedPositionProfile_PositionProfilePayload!
}
"""Attributes of the closed position profile."""
type ClosePostedPositionProfile_PositionProfilePayload {
  """The identifier of the closed posted position profile."""
  profileId: ObjectIdentifier!
}
"""The output parameter for the `updateUnpostedPositionProfile` mutation."""
type UpdateUnpostedPositionProfilePayload {
  """Attributes of the unposted position profile."""
  unpostedPositionProfile: PositionProfile!
}
"""The output parameter for the `deletePositionOpening` mutation."""
type DeletePositionOpeningPayload {
  """The details of the deleted position opening."""
  positionOpening: PositionOpening!
}
"""The output parameter for the `deleteUnpostedPositionProfile` mutation."""
type DeleteUnpostedPositionProfilePayload {
  """The details of the deleted unposted position profile."""
  unpostedPositionProfile: PositionProfile!
}
"""A position opening in a paginated list."""
type PositionOpeningEdge {
  """
  The opaque cursor to the position opening.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual position opening."""
  node: PositionOpening!
}
"""A page of position openings."""
type PositionOpeningConnection {
  """
  The page of position openings and their corresponding cursors.
  
  This list may be empty.
  """
  edges: [PositionOpeningEdge!]!
  """The pagination metadata for this page of position openings."""
  pageInfo: PageInfo!
}
"""
A job requisition or position opening within an organization.

This is a container object that groups multiple `PositionProfile`s together along with their owner.
"""
type PositionOpening {
  """
  The status of the position opening.
  
  Currently three codes are defined:
  - `Incomplete` indicates the position opening is in a draft state.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String!
  """An opaque identifier for the position opening."""
  documentId: ObjectIdentifier!
  """
  The party that owns the position opening.
  
  This may be different from the hiring organization if the position opening is created by a recruitment agency.
  """
  postingRequester: PostingRequester!
  """
  An array of profiles for the position opening.
  
  Each profile represents a posted job ad or an unposted internal requisition associated with this opening.
  """
  positionProfiles: [PositionProfile!]!
}
"""The party that owns the position opening."""
type PostingRequester {
  """An opaque identifier for hirer or agency owning the position opening."""
  id: ObjectIdentifier!
  """The name of the party that owns the position opening."""
  name: String!
  """
  The legacy SEEK ANZ advertiser ID.
  
  This is a numeric identifier used by SEEK ANZ's legacy Job Posting & Application Export APIs.
  For hirers or agencies in other schemes this will be `null`.
  """
  seekAnzAdvertiserId: Int
  """
  The role of the owner of the position opening.
  
  Currently two codes are defined:
  - `Agency` indicates a recruitment agency hiring on behalf of another company.
  - `Company` indicates a company hiring on behalf of themselves.
  """
  roleCode: String!
  """Specific contact people for the position opening at the party."""
  personContacts: [SpecifiedPerson!]!
}
"""
A profile of a position opening.

This contains information of how a position opening is presented on a job board or as an internal requisition.
"""
type PositionProfile {
  """An opaque identifier for the position profile."""
  profileId: ObjectIdentifier!
  """The `PositionOpening` that this profile was created under."""
  positionOpening: PositionOpening!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """The organization which has the position."""
  positionOrganizations: [HiringOrganization!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """An optional agency-provided opaque job reference."""
  seekAgencyJobReference: String
  """
  The public web URL of the posted job ad.
  
  This will be `null` for unposted position profiles.
  """
  positionUri: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescription!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  If the offered schedule isn't known this will be `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackage!
  """
  A SEEK ANZ work type code.
  
  Four work type codes are defined:
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `Casual` indicates a casual position.
  
  For positions in other schemes this will be `null`.
  """
  seekAnzWorkTypeCode: String
  """The occupational categories of the job."""
  jobCategories: [JobCategory!]!
  """The locations of the position."""
  positionLocation: [Location!]!
  """
  The set of questions presented to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaire: ApplicationQuestionnaire
  """The video to render within the advertisement."""
  seekVideo: SeekVideo
  """The instructions related to posting the job ad."""
  postingInstructions: [PostingInstruction!]!
}
"""
A description type identifier.

This specifies the meaning of the description and determines where it's
presented to the candidate.
"""
type PositionFormattedDescriptionIdentifier {
  """
  The description type.
  
  Currently, three description identifiers are defined:
  1. `AdvertisementDetails` is the detailed description of the position that appears on the job ad.
  2. `SearchSummary` is a short description that appears in search results.
  3. `SearchBulletPoint` is a highlight or selling point of the position that appears in search results.
     SEEK ANZ allows up to three search bullet points for Premium or StandOut ad products.
  """
  value: String!
}
"""A formatted description of the position profile."""
type PositionFormattedDescription {
  """The description type."""
  descriptionId: PositionFormattedDescriptionIdentifier!
  """The HTML content of the description."""
  content: String!
}
"""The salary or compensation for a position."""
type RemunerationPackage {
  """
  A code classifying the primary method of payment for a position.
  
  Currently, four basis codes are defined:
  
  1. `Hourly` employment is paid for the number of hours worked.
  2. `Salaried` employment is paid on an annual basis.
  3. `SalariedPlusCommission` employment is paid on an annual basis plus a results-based commission.
  4. `CommissionOnly` employment is paid exclusively a results-based commission.
  """
  basisCode: String!
  """
  An array of offered salary ranges.
  
  The scheme `seekAnz` will always have a single element containing the amount for the `basisCode`.
  """
  ranges: [RemunerationRange!]!
  """Human readable descriptions of the remuneration package."""
  descriptions: [String!]!
}
"""A salary or compensation range for a position."""
type RemunerationRange {
  """The minimum amount an organization is willing to pay for a position."""
  minimumAmount: RemunerationAmount!
  """
  The maximum amount an organization is willing to pay for a position.
  
  A 'null' value indicates the organization has not specified an upper bound for the range.
  """
  maximumAmount: RemunerationAmount
  """
  The interval the remuneration amounts are calculated over.
  
  Currently two interval codes are defined:
  
  - `Hourly` is used to express hourly rates.
  - `Year` is used to express annual salaries or commissions.
  """
  intervalCode: String!
}
"""A monetary amount of remuneration in a specified currency."""
type RemunerationAmount {
  """
  A non-negative float in the major currency unit for the ISO currency code.
  
  For example, this is the number of dollars in dollar-denominated currencies.
  """
  value: Float!
  """The three-letter ISO 4217 currency code, in uppercase."""
  currency: String!
}
"""A collection of information about where and how to post a job ad."""
type PostingInstruction {
  """The start date of the posting."""
  start: DateTime!
  """The end date of the posting."""
  end: DateTime!
  """
  An array of methods for applying to the position.
  
  If no methods are provided, SEEK's native apply form will be used to receive candidate applications.
  Native applications will raise a `CandidateApplicationCreated` event that points to a `CandidateProfile` object.
  """
  applicationMethods: [ApplicationMethod!]!
  """
  The identifier of the branding applied to the posted job ad.
  
  This is included for HR-JSON compatibility; GraphQL users should use the `branding` nested object instead.
  """
  brandingId: String
  """The branding applied to the posted job ad."""
  branding: AdvertisementBranding
}
"""A method of applying to a position."""
type ApplicationMethod {
  """
  A URL of an external application form.
  
  When this is provided, SEEK's native apply form will be disabled and the candidate will be redirected to the supplied URL.
  """
  applicationUri: WebUrl
  """The email address to direct candidate applications to."""
  applicationEmail: Email @deprecated(reason: "Do not use this field. This has been replaced by application export.")
}
"""A collection of information about the video to display alongside advertisement details."""
type SeekVideo {
  """The URL of the video."""
  url: String!
  """
  The position relative to the advertisement details where the video is rendered.
  
  Currently, two codes are defined:
  
  - `Above` indicates the video will render above the advertisement details.
  - `Below` indicates the video will render below the advertisement details.
  """
  seekAnzPositionCode: String
}
"""
The criteria to filter position openings by.

These are `PositionOpening`-specific extensions on top of the standard pagination arguments `after` and `first`.
"""
input PositionOpeningsFilterInput {
  """
  Optionally filter results to only include position openings with the specified status code.
  
  Currently three codes are defined:
  - `Incomplete` indicates the position opening is in a draft state.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String
}
"""An action that can be executed as part of a workflow process."""
type ProcessAction {
  """The code of the action."""
  code: String!
  """A deep link to the action."""
  seekUrl: WebUrl
}
"""Information about a person not specific to a candidate profile."""
type CandidatePerson {
  """The person's name."""
  name: PersonName!
  """Methods of communication with the person."""
  communication: Communication!
}
"""
A person who applied for a position at a company.

If the same person applies to multiple hirers they will have distinct
`Candidate` objects created.
"""
type Candidate {
  """
  An opaque identifier for the candidate
  
  This is unique for a given hirer & person.
  """
  documentId: ObjectIdentifier!
  """
  Information to identify the person, including their name and methods of
  communicating with the person.
  """
  person: CandidatePerson!
  """
  The list of profiles associated with with the candidate.
  Each submitted application for a position will have an associated profile.
  """
  profiles: [CandidateProfile!]!
}
"""The role of an attachment within a profile."""
enum SeekAttachmentRole {
  """A resume or CV."""
  RESUME @deprecated(reason: "Use Attachment.seekRoleCode")
  """A cover letter specific to a position opening."""
  COVER_LETTER @deprecated(reason: "Use Attachment.seekRoleCode")
  """A document supporting a position-specific selection criteria."""
  SELECTION_CRITERIA @deprecated(reason: "Use Attachment.seekRoleCode")
}
"""The details of a position the candidate applied for."""
type AssociatedPositionOpening {
  """
  The identifier for the position opening the candidate applied for.
  
  This is included for HR-JSON compatibility; GraphQL users should use the
  `positionOpening` nested object instead.
  """
  positionOpeningId: ObjectIdentifier!
  """The position opening this candidate applied for."""
  positionOpening: PositionOpening!
  """
  The public web URL of the posted job ad.
  
  This will be `null` for unposted position profiles.
  """
  positionUri: String
  """
  An indicator that the candidate applied to this associated position.
  
  This is always `true` until proactive sourcing is supported.
  """
  candidateAppliedIndicator: Boolean
}
"""A profile attachment stored at an external URL."""
type Attachment {
  """
  The opaque identifier for the attachment.
  This is unique across all attachments.
  """
  id: ObjectIdentifier!
  """
  A download URL for the attachment.
  
  This URL accepts partner tokens or browser tokens that include the `download:candidate-profile-attachments` scope.
  This is guaranteed to be an absolute URL with an origin of `https://graphql.seek.com`.
  """
  url: String!
  """
  An array of human readable descriptions of the attachment.
  
  Resumes & cover letters can be programmatically identified using the  `seekRoleCode` field.
  """
  descriptions: [String!]!
  """
  The role of the attachment within a profile.
  
  Currently, two codes are defined:
  
  - `Resume` is used for a candidate's resume or CV.
  - `CoverLetter` is used for a candidate's cover letter for a specific position.
  
  Additional documents will have a `null` role code.
  They can be distinguished by their free text `descriptions`.
  """
  seekRoleCode: String
  """The role of the attachment within a profile."""
  seekRole: SeekAttachmentRole @deprecated(reason: "Use seekRoleCode")
}
"""Basic information to identify and reference a specific organization."""
type Organization {
  """The human readable name of the organization."""
  name: String!
}
"""The details about a person's tenure within the position."""
type PositionHistory {
  """
  The start date of the position.
  
  This may only contain the year and month, e.g. `2019-01`.
  """
  start: HistoryDate!
  """
  The end date of the position if known.
  
  This may only contain the year and month, e.g. `2020-01`.
  """
  end: HistoryDate
  """Indicates whether the person is still working at the organization, if known."""
  current: Boolean
  """The title that the person held for this position."""
  title: String!
  """An array of descriptions of the person's responsibilities, skills and achievements in the position."""
  descriptions: [String!]!
}
"""The details of a person's employment, work, or relevant experience."""
type EmployerHistory {
  """The specific organization to which the person held positions."""
  organization: Organization!
  """The set of positions that the person held."""
  positionHistories: [PositionHistory!]!
}
"""The details of a student's degree."""
type EducationDegree {
  """The name of the degree."""
  name: String!
  """
  The granted status of the degree.
  
  Currently, two statuses are defined:
  - `InProgress` indicates the student is still completing the degree.
  - `Granted` indicates the degree has been granted to the student.
  """
  degreeGrantedStatus: String!
  """
  The date the degree was granted or is expected to be granted.
  
  This may only contain a year and optional month, e.g. `2020` or `2020-06`.
  If the date isn't known this will be `null`.
  """
  date: HistoryDate
}
"""The details documenting a person's attendance at an educational institution."""
type EducationAttendance {
  """The institution the person attended."""
  institution: Organization!
  """The degrees which were awarded or in process at the institution."""
  educationDegrees: [EducationDegree!]!
}
"""A skill or competency asserted by the candidate."""
type PersonCompetency {
  """The human readable name of the competency."""
  competencyName: String!
}
"""A source from which the candidate was obtained from."""
type CandidateSource {
  """Free text description of the source."""
  name: String!
  """
  The grouping that the source falls under.
  
  Currently, two types are defined:
  
  - `PartnerUpload` indicates that the candidate was uploaded to SEEK from a
    partner system.
  - `SeekApplication` indicates that the candidate applied for a position on
    the SEEK candidate site.
  """
  type: String!
}
"""Structured information about a candidate in relation to a particular position."""
type CandidateProfile {
  """
  The `Candidate` that this profile relates to.
  
  This contains the candidate's personal details along with all their profiles
  for the same hirer.
  """
  candidate: Candidate!
  """
  An opaque identifier for the profile.
  
  This profile can be queried at any time by passing this identifier string
  to `candidateProfile`.
  """
  profileId: ObjectIdentifier!
  """The date & time the candidate was associated with the position."""
  createDateTime: DateTime!
  """The positions this candidate has applied for."""
  associatedPositionOpenings: [AssociatedPositionOpening!]!
  """The attachments related to the candidate's profile."""
  attachments: [Attachment!]!
  """The employment history of the candidate."""
  employment: [EmployerHistory!]!
  """The education history of the candidate."""
  education: [EducationAttendance!]!
  """The skills or competencies of the candidate."""
  qualifications: [PersonCompetency!]!
  """The sources from which the candidate was obtained from."""
  candidateSources: [CandidateSource!]!
  """The date & time the candidate profile was last updated."""
  updateDateTime: DateTime!
  """A list of executable actions linked to the candidate profile."""
  seekActions: [ProcessAction!]!
  """The completed candidate submission for the position profile's questionnaire."""
  seekQuestionnaireSubmission: ApplicationQuestionnaireSubmission
}
"""A webhook attempt."""
type WebhookAttempt {
  """An opaque identifier for the webhook attempt."""
  id: ObjectIdentifier!
  """The date & time that the webhook attempt was acknowledged or timed out."""
  createDateTime: DateTime!
  """The event opaque identifier that generated the attempt."""
  eventId: ObjectIdentifier!
  """The subscription opaque identifier that generated the attempt."""
  subscriptionId: ObjectIdentifier!
  """The HTTP status for the webhook attempt."""
  statusCode: Int!
  """
  The result description for the webhook attempt.
  
  Currently, four codes are defined:
  
  1. `BadResponse` indicates that the webhook attempt received a non-2xx HTTP response
  2. `InvalidUrl` indicates that the subscription URL did not pass validation
  3. `RequestTimeout` indicates that the webhook attempt did not receive a timely response
  4. `Success` indicates that the webhook attempt received a 2xx HTTP response
  """
  descriptionCode: String!
  """
  The identifier of the HTTP request for the webhook attempt.
  
  This identifier is included in the request as an `X-Request-Id` custom header.
  """
  requestId: String!
}
"""A webhook attempt in a paginated list."""
type WebhookAttemptEdge {
  """
  The opaque cursor to the webhook attempt.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual webhook attempt."""
  node: WebhookAttempt!
}
"""A page of webhook attempts."""
type WebhookAttemptsConnection {
  """
  The page of webhook attempts and their corresponding cursors.
  
  This is always a non-empty list.
  """
  edges: [WebhookAttemptEdge!]!
  """The pagination metadata for this page of webhook attempts."""
  pageInfo: PageInfo!
}
"""
The criteria to filter webhook attempts by.

These are `WebhookAttempt`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input WebhookAttemptsFilterInput {
  """
  The creation date & time that resulting webhook attempts must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookAttemptsConnection`.
  """
  afterDateTime: DateTime
  """
  The creation date & time that resulting webhook attempts must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookAttemptsConnection`.
  """
  beforeDateTime: DateTime
  """
  The types of webhook attempts to retrieve.
  
  See the relevant `WebhookAttempt` implementation for a list of supported description types.
  """
  descriptionCodes: [String!]
}
"""The details of the webhook subscription to be created."""
input CreateWebhookSubscription_SubscriptionInput {
  """
  The type of event to subscribe to.
  
  See `Event` implementations for a list of supported values.
  """
  eventTypeCode: String!
  """
  The data source for the event.
  
  This commonly refers to a SEEK brand.
  See the relevant `Event` implementation for a list of supported schemes.
  """
  schemeId: String!
  """
  The optional hirer ID to receive events from.
  
  By default webhook subscriptions will send events from all hirers the partner has access to.
  Providing a hirer ID will filter events to the specified hirer.
  """
  hirerId: String
  """The subscriber-owned URL where events will be sent to."""
  url: String!
  """
  The maximum number of events that will be sent in each HTTP request.
  
  This number must be between 1 and 10 inclusive. Defaults to 10.
  """
  maxEventsPerAttempt: Int
  """
  The algorithm for signing webhooks.
  
  Currently, two codes are defined:
  
  - `None` indicates no signature will be attached.
  - `SeekHmacSha512` indicates a HMAC SHA-512 hex digest will be attached to
    each request as a `Seek-Signature` header.
  
  A webhook's signature can be used to validate that the request originated
  from SEEK.
  
  Use a constant-time algorithm to validate the signature. Regular comparison
  methods like the `==` operator are susceptible to timing attacks.
  """
  signingAlgorithmCode: String!
  """
  The secret for signing webhooks.
  
  This must be specified if `signingAlgorithmCode` is not `None`. It is
  used as the key to generate a message authentication code for each request.
  
  The secret should be a random string with high entropy that is not reused
  for any other purpose.
  """
  secret: String
}
"""The details of the webhook subscription delivery configuration to be updated."""
input UpdateWebhookSubscriptionDeliveryConfigurationSubscriptionInput {
  """The unique identifier for the subscription."""
  id: String!
  """The subscriber-owned URL where events will be sent to."""
  url: String!
  """
  The maximum number of events that will be sent in each HTTP request.
  
  This number must be between 1 and 10 inclusive. Defaults to 10.
  """
  maxEventsPerAttempt: Int
  """
  The algorithm for signing webhooks.
  
  Currently, two codes are defined:
  
  - `None` indicates no signature will be attached.
  - `SeekHmacSha512` indicates a HMAC SHA-512 hex digest will be attached to
    each request as a `Seek-Signature` header.
  
  A webhook's signature can be used to validate that the request originated
  from SEEK.
  
  Use a constant-time algorithm to validate the signature. Regular comparison
  methods like the `==` operator are susceptible to timing attacks.
  """
  signingAlgorithmCode: String!
  """
  The secret for signing webhooks.
  
  This must be specified if `signingAlgorithmCode` is not `None`. It is
  used as the key to generate a message authentication code for each request.
  
  The secret should be a random string with high entropy that is not reused
  for any other purpose.
  """
  secret: String
}
"""The details of the webhook subscription to be deleted."""
input DeleteWebhookSubscription_SubscriptionInput {
  """The unique identifier for the subscription."""
  id: String!
}
"""
A subscription for a given event type and scheme to be delivered via webhook.

Events are delivered in batches with a HTTP POST request to the specified subscription URL.
"""
type WebhookSubscription {
  """The unique identifier for the subscription."""
  id: ObjectIdentifier!
  """
  The type of event.
  
  See `Event` implementations for a list of supported values.
  """
  eventTypeCode: String!
  """
  The data source for the event.
  
  This commonly refers to a SEEK brand.
  See the relevant `Event` implementation for a list of supported schemes.
  """
  schemeId: String!
  """
  The optional hirer ID to receive events from.
  
  By default webhook subscriptions will send events from all hirers the partner has access to.
  A non-null `hirerId` indicates that this subscription is filtered to a single hirer.
  """
  hirerId: ObjectIdentifier
  """The subscriber-owned URL where events are sent to."""
  url: String!
  """
  The maximum number of events that will be sent in each HTTP request.
  
  This number is between 1 and 10 inclusive. Defaults to 10.
  """
  maxEventsPerAttempt: Int!
  """
  The algorithm for signing webhooks.
  
  Currently, two codes are defined:
  
  - `None` indicates no signature will be attached.
  - `SeekHmacSha512` indicates a HMAC SHA-512 hex digest will be attached to
    each request as a `Seek-Signature` header.
  
  A webhook's signature can be used to validate that the request originated
  from SEEK.
  
  Use a constant-time algorithm to validate the signature. Regular comparison
  methods like the `==` operator are susceptible to timing attacks.
  """
  signingAlgorithmCode: String!
  """
  The date & time the webhook subscription was created.
  
  Initial `afterDateTime` and `beforeDateTime` filters apply to this field.
  """
  createDateTime: DateTime!
  """The date & time the webhook subscription was last updated."""
  updateDateTime: DateTime!
  """
  A page of webhook attempts for the current subscription matching the specified criteria.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempts`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}
"""The input parameter for the `createWebhookSubscription` mutation."""
input CreateWebhookSubscriptionInput {
  """The details of the webhook subscription to be created."""
  webhookSubscription: CreateWebhookSubscription_SubscriptionInput!
}
"""The output parameter for the `createWebhookSubscription` mutation."""
type CreateWebhookSubscriptionPayload {
  """The details of the created webhook subscription."""
  webhookSubscription: WebhookSubscription!
}
"""The input parameter for the `updateWebhookSubscriptionDeliveryConfiguration` mutation."""
input UpdateWebhookSubscriptionDeliveryConfigurationInput {
  """The details of the webhook subscription to be updated."""
  webhookSubscription: UpdateWebhookSubscriptionDeliveryConfigurationSubscriptionInput!
}
"""The output parameter for the `updateWebhookSubscriptionDeliveryConfiguration` mutation."""
type UpdateWebhookSubscriptionDeliveryConfigurationPayload {
  """The details of the updated webhook subscription."""
  webhookSubscription: WebhookSubscription!
}
"""The input parameter for the `deleteWebhookSubscription` mutation."""
input DeleteWebhookSubscriptionInput {
  """The details of the webhook subscription to be deleted."""
  webhookSubscription: DeleteWebhookSubscription_SubscriptionInput!
}
"""The output parameter for the `deleteWebhookSubscription` mutation."""
type DeleteWebhookSubscriptionPayload {
  """The details of the deleted webhook subscription."""
  webhookSubscription: WebhookSubscription!
}
"""A webhook subscription in a paginated list."""
type WebhookSubscriptionEdge {
  """
  The opaque cursor to the webhook subscription.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual webhook subscription."""
  node: WebhookSubscription!
}
"""A page of webhook subscriptions."""
type WebhookSubscriptionsConnection {
  """
  The page of webhook subscriptions and their corresponding cursors.
  
  This is always a non-empty list.
  """
  edges: [WebhookSubscriptionEdge!]!
  """The pagination metadata for this page of subscriptions."""
  pageInfo: PageInfo!
}
"""
The criteria to filter webhook subscriptions by.

These are `WebhookSubscription`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input WebhookSubscriptionsFilterInput {
  """
  The creation date & time that resulting webhook subscriptions must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookSubscriptionsConnection`.
  """
  afterDateTime: DateTime
  """
  The creation date & time that resulting webhook subscriptions must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookSubscriptionsConnection`.
  """
  beforeDateTime: DateTime
  """
  The event types of webhook subscriptions to retrieve.
  
  See the relevant `WebhookSubscription` implementation for a list of supported event types.
  """
  eventTypeCodes: [String!]
  """
  The hirer IDs of the hirer-filtered webhook subscriptions to retrieve.
  
  If this is not provided then both hirer-filtered and unfiltered subscriptions will be returned.
  """
  hirerIds: [String!]
}
"""A page of events from a stream."""
type EventsConnection {
  """
  The page of events and their corresponding cursors.
  
  This is always a non-empty list.
  """
  edges: [EventEdge!]!
  """The pagination metadata for this page of events."""
  pageInfo: PageInfo!
}
"""An event in a stream."""
type EventEdge {
  """
  The opaque cursor to the event in the stream.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual event."""
  node: Event!
  """
  The date & time the event was added to the stream.
  
  Initial `afterDateTime` and `beforeDateTime` filters apply to this field.
  """
  streamDateTime: DateTime!
}
"""
A signal that an action has been performed on the SEEK platform that may be of interest to an integration partner.

Events can be delivered via:

- Webhook, using the `createWebhookSubscription` mutation
- GraphQL polling, using the paginated `events` query
"""
interface Event {
  """The unique identifier of the event."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  This commonly refers to a SEEK brand.
  See the relevant `Event` implementation for a list of supported schemes.
  """
  schemeId: String!
  """
  The type of event.
  
  See `Event` implementations for a list of supported values.
  """
  typeCode: String!
  """
  The date & time the event was created.
  
  This is commonly linked to the creation of an object that can be retrieved from the SEEK API.
  
  The data source for this field differs by event type and scheme.
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}
"""
The event signaling that a candidate has applied for a `PositionOpening`.

A candidate may apply for the same position opening more than once.
Each application will trigger a new event with a distinct `id`.
"""
type CandidateApplicationCreatedEvent implements Event {
  """The unique identifier of the event."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - seekAnz
  """
  schemeId: String!
  """The type of event, i.e. `CandidateApplicationCreated`."""
  typeCode: String!
  """
  The date & time the application was accepted from the candidate.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """
  The identifier for the specific `CandidateProfile` associated with the application.
  
  This can be used to retrieve structured candidate details with the `candidateWithApplicationProfile` query.
  """
  candidateApplicationProfileId: String!
  """The identifier for the `Candidate` that applied for the position opening."""
  candidateId: String!
  """
  The `Candidate` that applied for the position opening.
  
  This will include the candidate's personal details along with all
  application profiles for a single hirer.
  """
  candidate: Candidate!
  """The `CandidateProfile` associated with the application."""
  candidateApplicationProfile: CandidateProfile!
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}
"""
The event signaling that a `PositionProfile` has been posted.

Corresponding events for the `updatePostedPositionProfile` and `closePostedPositionProfile` mutations are not currently available.
"""
type PositionProfilePostedEvent implements Event {
  """The unique identifier of the event."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - seekAnz
  """
  schemeId: String!
  """The type of event, i.e. `PositionProfilePosted`."""
  typeCode: String!
  """
  The date & time the `PositionProfile` was considered as successfully posted inside of SEEK's internal systems.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """The identifier for the `PositionProfile` that was posted."""
  positionProfileId: String!
  """
  The `PositionProfile` that was posted.
  
  This may return null if the `PositionProfile` has been closed for an extended period of time.
  """
  positionProfile: PositionProfile
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}
"""The event signaling that a `CandidateProfile` has been purchased."""
type CandidateProfilePurchasedEvent implements Event {
  """The unique identifier of the event."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - seekAnz
  """
  schemeId: String!
  """The type of event, i.e. `CandidateProfilePurchased`."""
  typeCode: String!
  """
  The date & time the `CandidateProfile` was purchased.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """The identifier for the `CandidateProfile` that was purchased."""
  candidateProfileId: String!
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}
"""
The criteria to filter events by.

These are `Event`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input EventsFilterInput {
  """
  The stream date & time that resulting events must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `EventsConnection`.
  """
  afterDateTime: DateTime
  """
  The stream date & time that resulting events must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `EventsConnection`.
  """
  beforeDateTime: DateTime
  """
  An indicator that the event was successfully delivered via the specified webhook `subscriptionId`.
  
  This filter does not apply if `subscriptionId` is not specified.
  """
  deliveredIndicator: Boolean
  """
  The types of events to retrieve.
  
  See `Event` implementations for a list of supported values.
  """
  eventTypeCodes: [String!]
  """
  The subscription stream to retrieve events from.
  
  This can be used in combination with `deliveredIndicator` to identify events that were not successfully delivered through a particular webhook subscription.
  
  To consume events solely through GraphQL polling, do not specify this field.
  This will retrieve events from a persistent stream that is not associated with a webhook subscription.
  """
  subscriptionId: String
}