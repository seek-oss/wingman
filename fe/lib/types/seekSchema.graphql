schema {
  query: Query
  mutation: Mutation
}

"""A physical address."""
type Address {
  """The street line address."""
  line: String
  """
  An array of additional address lines.
  
  These may include an apartment or suite number.
  """
  extendedLines: [AddressComponent!]!
  """The two-letter ISO 3166-1:2013 country code, in uppercase."""
  countryCode: String
  """
  An array of further divisions of the country.
  
  These may include districts, regions, states, provinces, etc.
  """
  countrySubDivisions: [AddressComponent!]!
  """The city or suburb of the address."""
  city: String
  """The postal code of the address."""
  postalCode: String
  """The geographical coordinates of the address."""
  geoLocation: GeoLocation
  """The formatted representation of the whole address for display purposes."""
  formattedAddress: String
}

"""An individual component of a physical address."""
type AddressComponent {
  """
  The type of the address component.
  
  Currently, the following components are defined:
  
  - `Apartment` indicates an address line for an apartment, unit or suite.
  - `State` indicates a state or internal territory country subdivision.
  """
  type: String!
  """The actual component value."""
  value: String!
}

"""An individual component of a physical address."""
input AddressComponentInput {
  """
  The type of the address component.
  
  Currently, the following components are defined:
  
  - `Apartment` indicates an address line for an apartment, unit or suite.
  - `State` indicates a state or internal territory country subdivision.
  """
  type: String!
  """The actual component value."""
  value: String!
}

"""A physical address."""
input AddressInput {
  """The street line address."""
  line: String
  """
  An array of additional address lines.
  
  These may include an apartment or suite number.
  
  A maximum of 5 extended lines may be provided.
  """
  extendedLines: [AddressComponentInput!]!
  """The two-letter ISO 3166-1:2013 country code, in uppercase."""
  countryCode: String!
  """
  An array of further divisions of the country.
  
  These may include districts, regions, states, provinces, etc.
  
  A maximum of 5 subdivisions may be provided.
  """
  countrySubDivisions: [AddressComponentInput!]!
  """The city or suburb of the address."""
  city: String!
  """
  The postal code of the address.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  postalCode: String!
  """The geographical coordinates of the address."""
  geoLocation: GeoLocationInput
  """
  The formatted representation of the whole address for display purposes.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  formattedAddress: String
}

"""
Advertisement branding details and images.

This can be associated with one or more `PositionProfile`s when they are created.

Branding images are visible to candidates searching for positions or viewing a job ad with this associated advertisement branding.
"""
type AdvertisementBranding {
  """The identifier for the `AdvertisementBranding`."""
  id: ObjectIdentifier!
  """The advertisement branding name."""
  name: String!
  """A list of images associated with the advertisement branding."""
  images: [AdvertisementBrandingImage!]!
  """The organization that has the advertisement branding."""
  hirer: HiringOrganization!
}

"""An advertisement branding in a paginated list."""
type AdvertisementBrandingEdge {
  """
  The opaque cursor to advertisement branding.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual advertisement branding."""
  node: AdvertisementBranding!
}

"""A visual representation of advertisement branding."""
type AdvertisementBrandingImage {
  """
  The type of advertisement branding image.
  
  Currently, two codes are defined:
  
  - `OriginalLogo` indicates the original advertisement branding logo image from which other logo images are derived.
  
  - `CoverImage` indicates an optional cover image to be displayed on the top of job ads.
  """
  typeCode: String!
  """
  The URL of the advertisement branding image.
  
  This can be retrieved to visually identify an advertisement branding in a partner system.
  """
  url: String!
}

"""A page of advertisement brandings for a hirer."""
type AdvertisementBrandingsConnection {
  """
  The page of advertisement brandings and their corresponding cursors.
  
  This list may be empty.
  """
  edges: [AdvertisementBrandingEdge!]!
  """The pagination metadata for this page of advertisement brandings."""
  pageInfo: PageInfo!
}

"""A method of applying to a position."""
type ApplicationMethod {
  """
  A URL of an external application form.
  
  When this is provided, SEEK's native apply form will be disabled and the candidate will be redirected to the supplied URL.
  """
  applicationUri: WebUrl
  """The email address that candidate applications are directed to."""
  applicationEmail: Email @deprecated(reason: "This has been replaced by Application Export")
}

"""A method of applying to a position."""
input ApplicationMethodInput {
  """
  A URL of an external application form.
  
  When this is provided, SEEK's native apply form will be disabled and the candidate will be redirected to the supplied URL.
  """
  applicationUri: WebUrlInput
  """
  The email address to direct candidate applications to.
  
  This field has a maximum length of 100 bytes in UTF-8 encoding.
  
  This is deprecated. Do not use this field. This has been replaced by Application Export.
  """
  applicationEmail: EmailInput
}

"""
A privacy policy consent component of an `ApplicationQuestionnaire`.

This consists of a URL for candidates to view the privacy policy and text to prompt the candidate as to whether or not they agree.

The privacy policy consent component presents the candidate with a 'Yes' or 'No' choice.
"""
type ApplicationPrivacyConsent implements ApplicationQuestionnaireComponent {
  """The identifier for the `ApplicationQuestionnaireComponent`."""
  id: ObjectIdentifier!
  """
  The type of the component.
  
  This is always `PrivacyConsent`.
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the question.
  
  This can be used to correlate the question with the submitted question components.
  """
  value: String
  """The URL of the privacy policy to show to the candidate."""
  privacyPolicyUrl: WebUrl!
  """
  The HTML snippet to prompt the candidate for consent.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  
  This is optional and will default to 'Do you agree to the privacy policy?'.
  """
  descriptionHtml: String
}

"""
A privacy policy consent component of an `ApplicationQuestionnaire`.

This consists of a URL for candidates to view the privacy policy and text to prompt the candidate as to whether or not they agree.

The privacy policy consent component always defaults the available response choices for the candidate to 'Yes' and 'No'.
"""
input ApplicationPrivacyConsentInput {
  """
  The type of the component.
  
  This is always `PrivacyConsent`.
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the consent component.
  
  This can be used to correlate the consent component with the submitted response.
  """
  value: String
  """The URL of the privacy policy to show to the candidate."""
  privacyPolicyUrl: WebUrlInput!
  """
  The HTML snippet to prompt the candidate for consent.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  
  This is optional and will default to 'Do you agree to the privacy policy?'.
  """
  descriptionHtml: String
}

"""A candidate's response to a privacy policy consent component in the questionnaire."""
type ApplicationPrivacyConsentResponse implements ApplicationQuestionnaireComponentResponse {
  """The privacy consent component this is responding to."""
  component: ApplicationPrivacyConsent!
  """
  The type of the component.
  
  This is always `PrivacyConsent`.
  """
  componentTypeCode: String!
  """This indicates whether or not the candidate agrees to the provided privacy policy."""
  consentGivenIndicator: Boolean!
}

"""
A question component of an `ApplicationQuestionnaire`.

This consists of label text displayed to a user and an input for them to select a response.
"""
type ApplicationQuestion implements ApplicationQuestionnaireComponent {
  """The identifier for the `ApplicationQuestionnaireComponent`."""
  id: ObjectIdentifier!
  """
  The type of the component.
  
  This is always `Question`.
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the question.
  
  This can be used to correlate the question with the submitted question components.
  """
  value: String
  """
  The HTML snippet of the question being asked to the candidate.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  """
  questionHtml: String!
  """
  The type of the question response.
  
  Currently, three codes are defined:
  
  - `FreeText` for a free text response.
  - `MultiSelect` for choosing one or more responses from `responseChoice`.
  - `SingleSelect` for choosing a single response from `responseChoice`.
  """
  responseTypeCode: String!
  """
  The collection of possible responses.
  
  For `SingleSelect` and `MultiSelect` this must contain at least one element.
  """
  responseChoice: [ApplicationQuestionChoice!]
}

"""A single answer to a question in the questionnaire."""
type ApplicationQuestionAnswer {
  """
  The questionnaire choice for the current answer.
  
  For `FreeText` questions this will be `null`.
  """
  choice: ApplicationQuestionChoice
  """The text value of the selected answer."""
  answer: String!
}

"""A possible response to an `ApplicationQuestion`."""
type ApplicationQuestionChoice {
  """The identifier for the `ApplicationQuestionChoice`."""
  id: ObjectIdentifier!
  """Text of the choice displayed to the candidate."""
  text: String!
  """
  A partner provided unique reference ID to the question choice.
  
  This can be used to correlate the question with the submitted answers.
  """
  value: String
  """
  Whether this choice is preferred when scoring the answers.
  
  This is not displayed to the candidate.
  """
  preferredIndicator: Boolean!
}

"""A possible response to an `ApplicationQuestion`."""
input ApplicationQuestionChoiceInput {
  """Text of the choice displayed to the candidate."""
  text: String!
  """
  A unique ID for this choice.
  
  This can be used to correlate the choice with the provided answers.
  This must be unique within the questionnaire.
  """
  value: String!
  """
  Whether this choice is preferred when scoring the answers.
  
  This is not displayed to the candidate.
  """
  preferredIndicator: Boolean!
}

"""
A question component of an `ApplicationQuestionnaire`.

This consists of label text displayed to a user and an input for them to select a response.
"""
input ApplicationQuestionInput {
  """
  The type of the component.
  
  This is always `Question`.
  """
  componentTypeCode: String!
  """
  The HTML snippet of the question being asked to the candidate.
  
  Unsupported tags will be silently stripped when creating a questionnaire.
  """
  questionHtml: String!
  """
  The type of the question response.
  
  Currently, three codes are defined:
  
  - `FreeText` for a free text response.
  - `MultiSelect` for choosing one or more responses from `responseChoice`.
  - `SingleSelect` for choosing a single response from `responseChoice`.
  """
  responseTypeCode: String!
  """
  A unique ID for this question.
  
  This can be used to correlate the question with the provided answers.
  This must be unique within the questionnaire.
  """
  value: String!
  """
  The collection of possible responses.
  
  For `SingleSelect` and `MultiSelect` this must contain at least one element.
  """
  responseChoice: [ApplicationQuestionChoiceInput!]
}

"""A candidate's response to a question in the questionnaire."""
type ApplicationQuestionResponse implements ApplicationQuestionnaireComponentResponse {
  """The question this is responding to."""
  component: ApplicationQuestion!
  """
  The type of the component.
  
  This is always `Question`.
  """
  componentTypeCode: String!
  """
  The answers provided by the candidate.
  
  For `SingleSelect` and `FreeText` this will be a single element array.
  """
  answers: [ApplicationQuestionAnswer!]!
  """
  How well the candidate answered the question against the hirer's preferences.
  
  The score is calculated differently based on the `responseTypeCode`:
  
  - For `FreeText`, the score will be null.
  - For `MultiSelect`, the score will be between 0 and 1 as a floating point.
    For example, if the candidate selected half of the preferred answers, the score would be 0.5.
  - For `SingleSelect`, the score will be either 1 or 0 based off whether or not the candidate selected a preferred answer.
  """
  score: Float
}

"""
A set of questions presented to a candidate during an application.

This can be associated with one or more `PositionProfile`s when they are created.
"""
type ApplicationQuestionnaire {
  """The identifier for the `ApplicationQuestionnaire`."""
  id: ObjectIdentifier!
  """The array of components in the order they are presented to the candidate."""
  components: [ApplicationQuestionnaireComponent!]!
}

"""
A component of an application questionnaire.

This only contains identifying metadata;
the `componentTypeCode` can be used to determine the concrete type of the component.
"""
interface ApplicationQuestionnaireComponent {
  """The identifier for the `ApplicationQuestionnaireComponent`."""
  id: ObjectIdentifier!
  """
  The type of the component.
  
  Currently, two codes are defined:
  
  - `PrivacyConsent` which corresponds to the `ApplicationPrivacyConsent` type.
  - `Question` which corresponds to the `ApplicationQuestion` type.
  """
  componentTypeCode: String!
  """
  A partner provided unique reference ID to the component.
  
  This can be used to correlate the component with the submission.
  """
  value: String
}

"""A component of the questionnaire to be created."""
input ApplicationQuestionnaireComponentInput {
  """
  The type of the component.
  
  Currently, two codes are defined:
  
  - `PrivacyConsent` which corresponds to the `privacyConsent` property.
  - `Question` which corresponds to the `question` property.
  """
  componentTypeCode: String!
  """
  A question component of an `ApplicationQuestionnaire`.
  
  This must be provided if the `componentTypeCode` is `Question`.
  """
  question: ApplicationQuestionInput
  """
  A privacy consent component of an `ApplicationQuestionnaire`.
  
  This must be provided if the `componentTypeCode` is `PrivacyConsent`.
  """
  privacyConsent: ApplicationPrivacyConsentInput
}

"""
A response to a component in a questionnaire.

This only contains metadata related to the component responded to in the questionnaire.
The implementation of a response is based on the `componentTypeCode` of its component.
"""
interface ApplicationQuestionnaireComponentResponse {
  """The component this is responding to."""
  component: ApplicationQuestionnaireComponent!
  """
  The type of the component.
  
  Currently, two codes are defined:
  
  - `PrivacyConsent` which corresponds to the `ApplicationPrivacyConsent` type.
  - `Question` which corresponds to the `ApplicationQuestion` type.
  """
  componentTypeCode: String!
}

"""A completed candidate submission for an `ApplicationQuestionnaire`."""
type ApplicationQuestionnaireSubmission {
  """The set of questions presented to the candidate during the application."""
  questionnaire: ApplicationQuestionnaire!
  """The candidate's responses to the application's questionnaire."""
  responses: [ApplicationQuestionnaireComponentResponse!]!
  """
  The indication of how well the candidate scored on all questions in the questionnaire.
  
  The score is a calculation between 0 and 1 as a floating point.
  For example, if the candidate received a score of 1 on one question, and a score of 0 on another, this overall score would be calculated as 0.5.
  If there are no scored questions this score will be null.
  """
  score: Float
}

"""The details of a position that a candidate is associated with."""
type AssociatedPositionOpening {
  """
  The identifier for the `PositionOpening`.
  
  This is included for HR-JSON compatibility;
  GraphQL users should use the `positionOpening` nested object instead.
  """
  positionOpeningId: ObjectIdentifier!
  """The position opening that the candidate is associated with."""
  positionOpening: PositionOpening!
  """
  A resource identifier for the position.
  
  This identifies the relevant position profile within the position opening.
  
  - For candidate application profiles from the Application Export use case,
    this is the public web URL of the posted job ad.
    It can be matched with the position profile `positionUri` field.
  - For purchased candidate profiles from the Proactive Sourcing use case,
    this is the object identifier of the relevant unposted position profile.
    It can be matched with the position profile `profileId` field.
  """
  positionUri: String!
  """
  Whether the candidate applied to this associated position.
  
  This is `false` for purchased profiles from the Proactive Sourcing use case.
  """
  candidateAppliedIndicator: Boolean
}

"""A profile attachment stored at an external URL."""
type Attachment {
  """
  The identifier for the `Attachment`.
  
  This is unique across all attachments.
  """
  id: ObjectIdentifier!
  """
  A download URL for the attachment.
  
  This URL accepts partner tokens or browser tokens that include the `download:candidate-profile-attachments` scope.
  This is guaranteed to be an absolute URL with an origin of `https://graphql.seek.com`.
  """
  url: String!
  """
  An array of human readable descriptions of the attachment.
  
  Resumes & cover letters can be programmatically identified using the  `seekRoleCode` field.
  """
  descriptions: [String!]!
  """
  The role of the attachment within a profile.
  
  Currently, two codes are defined:
  
  - `Resume` is used for a candidate's resume or CV.
  - `CoverLetter` is used for a candidate's cover letter for a specific position.
  
  Additional documents will have a `null` role code.
  They can be distinguished by their free text `descriptions`.
  """
  seekRoleCode: String
  """The role of the attachment within a profile."""
  seekRole: SeekAttachmentRole @deprecated(reason: "Use seekRoleCode")
}

"""
A person who applied for a position at a company.

If the same person applies to multiple hirers they will have distinct `Candidate` objects created.
"""
type Candidate {
  """
  The identifier for the `Candidate`.
  
  This is unique for a given hirer & person.
  """
  documentId: ObjectIdentifier!
  """
  The candidate's primary email address.
  
  The value is only set for candidates with `CandidateSource` value `PartnerUpload`.
  Values will be unique within a given hirer.
  """
  seekPrimaryEmailAddress: String
  """Instructions on how this candidate should be distributed."""
  distributionGuidelines: DistributionGuidelines!
  """
  Information to identify the person,
  including their name and methods of communicating with the person.
  """
  person: CandidatePerson!
  """
  The list of profiles associated with with the candidate.
  
  Each submitted application for a position will have an associated profile.
  """
  profiles: [CandidateProfile!]!
}

"""
The event signaling that a candidate has applied for a `PositionOpening`.

A candidate may apply for the same position opening more than once.
Each application will trigger a new event with a distinct `id`.
"""
type CandidateApplicationCreatedEvent implements Event {
  """The identifier for the `Event`."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - `seekAnz`
  """
  schemeId: String!
  """The type of event, i.e. `CandidateApplicationCreated`."""
  typeCode: String!
  """
  The date & time the application was accepted from the candidate.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """
  The identifier for the specific `CandidateProfile` associated with the application.
  
  This can be used to retrieve structured candidate details with the `candidateProfile` query.
  """
  candidateApplicationProfileId: String!
  """The identifier for the `Candidate` that applied for the position opening."""
  candidateId: String!
  """
  The `Candidate` that applied for the position opening.
  
  This will include the candidate's personal details along with all application profiles for a single hirer.
  """
  candidate: Candidate!
  """The `CandidateProfile` associated with the application."""
  candidateApplicationProfile: CandidateProfile!
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  A maximum of 100 webhook attempts can be returned in a single page.
  Additional webhook attempts can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}

"""Information about a person not specific to a candidate profile."""
type CandidatePerson {
  """The person's name."""
  name: PersonName!
  """Methods of communication with the person."""
  communication: Communication!
}

"""Information about a person not specific to a candidate profile."""
input CandidatePersonInput {
  """The person's name."""
  name: PersonNameInput!
  """Methods of communication with the person."""
  communication: CommunicationInput!
}

"""An action that can be executed as part of a workflow process."""
type CandidateProcessAction {
  """
  The code of the action.
  
  Currently, the following action codes are defined:
  
  - `AgencySubmission`
  - `CandidateWorkflowTransition`
  - `Document`
  - `Email`
  - `Note`
  - `PhoneCall`
  - `PostPlacementActivity`
  - `Screening`
  - `StatusChange`
  - `VerificationActivity`
  - `Other`
  """
  code: String!
  """The free-form description of the action."""
  description: String
  """A short human-readable name for the workflow step."""
  name: String
  """A deep link to the action."""
  seekUrl: WebUrl
}

"""An action that can be executed as part of a workflow process."""
input CandidateProcessActionInput {
  """
  The code of the action.
  
  Currently, the following action codes are defined:
  
  - `AgencySubmission`
  - `CandidateWorkflowTransition`
  - `Document`
  - `Email`
  - `Note`
  - `PhoneCall`
  - `PostPlacementActivity`
  - `Screening`
  - `StatusChange`
  - `VerificationActivity`
  - `Other`
  """
  code: String!
  """
  The free-form description of the action.
  
  This is required for a process history action of an uploaded candidate.
  """
  description: String
  """
  A short human-readable name of the workflow process.
  
  This is required for a process history action of an uploaded candidate.
  """
  name: String
  """
  A deep link to the action.
  
  This is required for a profile action of an uploaded candidate.
  
  The `url` field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekUrl: WebUrlInput
}

"""A single item in a `CandidateProfile`'s workflow process history."""
type CandidateProcessHistoryItem {
  """The identifier for the `CandidateProcessHistoryItem`."""
  id: ObjectIdentifier!
  """The `CandidateProfile` that the `CandidateProcessHistoryItem` relates to."""
  candidateProfile: CandidateProfile!
  """The date & time the action was executed."""
  actionDate: DateTime!
  """
  The executed action that constitutes this history item.
  
  This action may or may not trigger a change in the status of the underlying process.
  For example, an action may be to add a note against a candidate's profile,
  which has no material effect on the stage through the application process.
  """
  action: CandidateProcessAction!
  """
  The current status of the underlying process.
  
  For example, a candidate in an application process may progress through a series of statuses like applied, interviewed, offered, hired.
  """
  status: CandidateProcessStatus
  """
  The position profile that the history item relates to.
  
  This is null for interactions that are not specific to an individual position,
  such as a general interview with a recruiter.
  It will also be null where an unknown `profileId` was provided or the position profile has since been deleted.
  """
  positionProfile: PositionProfile
  """
  The underlying source for the item.
  
  For example, items related to an application process would note the job board or other channel that sourced the application.
  """
  seekSource: SeekProcessHistoryItemSource
  """The parties that executed the action."""
  primaryParties: [CandidateProcessParty!]!
}

"""A page of candidate process history items."""
type CandidateProcessHistoryItemConnection {
  """
  The page of candidate process history items and their corresponding cursors.
  
  This list may be empty.
  """
  edges: [CandidateProcessHistoryItemEdge!]!
  """The pagination metadata for this page of candidate process history items."""
  pageInfo: PageInfo!
}

"""A candidate process history item in a paginated list."""
type CandidateProcessHistoryItemEdge {
  """
  The opaque cursor to the candidate process history item.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual candidate process history item."""
  node: CandidateProcessHistoryItem!
}

"""A single item in a `CandidateProfile`'s workflow process history."""
input CandidateProcessHistoryItemInput {
  """The date & time the action was executed."""
  actionDate: DateTime!
  """
  The executed action that constitutes this history item.
  
  This action may or may not trigger a change in the status of the underlying process.
  For example, an action may be to add a note against a candidate's profile,
  which has no material effect on the stage through the application process.
  """
  action: CandidateProcessActionInput!
  """
  The current status of the underlying process.
  
  For example, a candidate in an application process may progress through a series of statuses like applied, interviewed, offered, hired.
  """
  status: CandidateProcessStatusInput
  """
  The position profile that the history item relates to.
  
  This is null for interactions that are not specific to an individual position,
  such as a general interview with a recruiter.
  """
  positionProfile: CandidateProcessHistoryItem_PositionProfileInput
  """
  The underlying source for the item.
  
  For example, items related to an application process would note the job board or other channel that sourced the application.
  
  This is required if `positionProfile` is specified.
  """
  seekSource: SeekProcessHistoryItemSourceInput
  """
  The parties that executed the action.
  
  At least one party is required for a process history item of an uploaded candidate.
  A maximum of 10 primary parties may be provided.
  """
  primaryParties: [CandidateProcessPartyInput!]!
}

"""A position profile associated with a workflow process."""
input CandidateProcessHistoryItem_PositionProfileInput {
  """The identifier for the `PositionProfile`."""
  profileId: String!
}

"""
A party that contributes to a workflow process.

This may be a person, organization, or both.
"""
type CandidateProcessParty {
  """The individual person that is contributing to the workflow process."""
  person: SpecifiedPerson
  """The organization that is contributing to the workflow process."""
  organization: Organization
}

"""
A party that contributes to a workflow process.

This may be a person, organization, or both.
"""
input CandidateProcessPartyInput {
  """The individual person that is contributing to the workflow process."""
  person: SpecifiedPersonInput
  """The organization that is contributing to the workflow process."""
  organization: OrganizationInput
}

"""A status of a workflow process."""
type CandidateProcessStatus {
  """
  The code of the status of the underlying process.
  
  Currently, the following status codes are defined:
  
  - `AgencyShortlist`
  - `AgencySubmission`
  - `Application`
  - `HirerShortlist`
  - `Interview`
  - `Offer`
  - `ReferenceCheck`
  - `Successful`
  - `TestingOrQualificationsCheck`
  - `Unsuccessful`
  """
  code: String!
}

"""A status of a workflow process."""
input CandidateProcessStatusInput {
  """
  The code of the status of the underlying process.
  
  Currently, the following status codes are defined:
  
  - `AgencyShortlist`
  - `AgencySubmission`
  - `Application`
  - `HirerShortlist`
  - `Interview`
  - `Offer`
  - `ReferenceCheck`
  - `Successful`
  - `TestingOrQualificationsCheck`
  - `Unsuccessful`
  """
  code: String!
}

"""Structured information about a candidate in relation to a particular position."""
type CandidateProfile {
  """
  The `Candidate` that this profile relates to.
  
  This contains the candidate's personal details along with all their profiles for the same hirer.
  """
  candidate: Candidate!
  """
  The identifier for the `CandidateProfile`.
  
  This profile can be queried at any time by passing this identifier string to `candidateProfile`.
  """
  profileId: ObjectIdentifier!
  """The date & time the candidate was associated with the position."""
  createDateTime: DateTime!
  """The positions this candidate has applied for."""
  associatedPositionOpenings: [AssociatedPositionOpening!]!
  """The attachments related to the candidate's profile."""
  attachments: [Attachment!]!
  """The employment history of the candidate."""
  employment: [EmployerHistory!]!
  """The education history of the candidate."""
  education: [EducationAttendance!]!
  """The skills or competencies of the candidate."""
  qualifications: [PersonCompetency!]!
  """The certifications and licenses the candidate holds."""
  certifications: [Certification!]!
  """The sources from which the candidate was obtained from."""
  candidateSources: [CandidateSource!]!
  """The candidate's preferences in an ideal position."""
  positionPreferences: [PositionPreference!]!
  """The date & time the candidate profile was last updated."""
  updateDateTime: DateTime!
  """A list of executable actions linked to the candidate profile."""
  seekActions: [CandidateProcessAction!]!
  """
  The workflow process history of the candidate.
  
  A maximum of 20 process history items can be returned in a single page.
  Additional items can be queried using a pagination cursor.
  
  This is null for non-uploaded candidates.
  """
  seekProcessHistory(
    """
    An opaque cursor to the earlier bounding page.
    
    Resulting items will _succeed_ this cursor.
    """
    after: String
    """
    The upper limit of items to return from the start of the list.
    
    Defaults to 10 if `first` is not specified.
    Excess items will be trimmed from the end of the list.
    """
    first: Int
  ): CandidateProcessHistoryItemConnection
  """The completed candidate submission for the position profile's questionnaire."""
  seekQuestionnaireSubmission: ApplicationQuestionnaireSubmission
}

"""The event signaling that a `CandidateProfile` has been purchased."""
type CandidateProfilePurchasedEvent implements Event {
  """The identifier for the `Event`."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - `seekAnz`
  """
  schemeId: String!
  """The type of event, i.e. `CandidateProfilePurchased`."""
  typeCode: String!
  """
  The date & time the `CandidateProfile` was purchased.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """The identifier for the `CandidateProfile` that was purchased."""
  candidateProfileId: String!
  """The `CandidateProfile` that was purchased."""
  candidateProfile: CandidateProfile!
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  A maximum of 100 webhook attempts can be returned in a single page.
  Additional webhook attempts can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}

"""A source from which the candidate was obtained from."""
type CandidateSource {
  """Free text description of the source."""
  name: String!
  """
  The grouping that the source falls under.
  
  Currently, two types are defined:
  
  - `PartnerUpload` indicates that the candidate was uploaded to SEEK from a partner system.
  - `SeekApplication` indicates that the candidate applied for a position on the SEEK candidate site.
  - `SeekPurchase` indicates that the candidate profile was purchased from SEEK Talent Search.
  """
  type: String!
}

"""A certification or license held by the candidate."""
type Certification {
  """The free text name of the certification."""
  name: String!
  """
  The time period for which the certification is effective.
  
  This will be `null` if the expiration date is unknown or not provided.
  """
  effectiveTimePeriod: EffectiveTimePeriod
  """
  The date the certification was last issued.
  
  This will be `null` if the issue date is unknown or not provided.
  """
  issued: HistoryDate
  """
  The date the certification was issued.
  
  This will be `null` if the issue date is unknown or not provided.
  """
  issueDate: HistoryDate @deprecated(reason: "Use `issued`.")
  """The organization that issued the certification."""
  issuingAuthority: Organization
  """
  Human readable descriptions of the certification.
  
  This can contain multiple descriptions from two different sources:
  
  1. Free text descriptions provided by the candidate.
  2. Human readable descriptions automatically generated from SEEK's internal structured data.
  """
  descriptions: [String!]!
}

"""The input parameter for the `closePostedPositionProfile` mutation."""
input ClosePostedPositionProfileInput {
  """The details of the position profile to be closed."""
  positionProfile: ClosePostedPositionProfile_PositionProfileInput!
}

"""The output of the `closePostedPositionProfile` mutation."""
type ClosePostedPositionProfilePayload {
  """Attributes of the closed position profile."""
  positionProfile: ClosePostedPositionProfile_PositionProfilePayload!
}

"""The details of the position profile to be closed."""
input ClosePostedPositionProfile_PositionProfileInput {
  """The identifier for the posted `PositionProfile` to be closed."""
  profileId: String!
}

"""Attributes of the closed position profile."""
type ClosePostedPositionProfile_PositionProfilePayload {
  """The identifier for the closed `PositionProfile`."""
  profileId: ObjectIdentifier!
}

"""Communication channels for a person."""
type Communication {
  """
  An array of phone numbers for the person.
  
  The phone numbers are ordered in descending preference.
  """
  phone: [Phone!]!
  """
  An array of email addresses for the person.
  
  The email addresses are ordered in descending preference.
  """
  email: [Email!]!
  """
  An array of physical addresses for the person.
  
  The physical addresses are ordered in descending preference.
  """
  address: [Address!]!
}

"""Communication channels for a person."""
input CommunicationInput {
  """
  An array of phone numbers for the person.
  
  The phone numbers are ordered in descending preference.
  
  A maximum of 5 phone numbers may be provided.
  """
  phone: [PhoneInput!]!
  """
  An array of email addresses for the person.
  
  The email addresses are ordered in descending preference.
  
  A maximum of 5 email addresses may be provided.
  """
  email: [EmailInput!]!
  """
  An array of physical addresses for the person.
  
  The physical addresses are ordered in descending preference.
  
  A maximum of 5 physical addresses may be provided.
  """
  address: [AddressInput!]
}

"""The input parameter for the `createApplicationQuestionnaire` mutation."""
input CreateApplicationQuestionnaireInput {
  """The details of the questionnaire to be created."""
  applicationQuestionnaire: CreateApplicationQuestionnaire_ApplicationQuestionnaireInput!
}

"""The output parameter for the `createApplicationQuestionnaire` mutation."""
type CreateApplicationQuestionnairePayload {
  """The details of the created questionnaire."""
  applicationQuestionnaire: ApplicationQuestionnaire!
}

"""The details of the questionnaire to be created."""
input CreateApplicationQuestionnaire_ApplicationQuestionnaireInput {
  """
  The identifier for the `HiringOrganization` that will own the questionnaire.
  
  Hirers can only associate position profiles with questionnaires they own.
  """
  hirerId: String!
  """The array of components in the order they are presented to the candidate."""
  components: [ApplicationQuestionnaireComponentInput!]!
}

"""The input parameter for the `createCandidateProcessHistoryItem` mutation."""
input CreateCandidateProcessHistoryItemInput {
  """The details of the `CandidateProfile` that the `CandidateProcessHistoryItem` belongs to."""
  candidateProfile: CreateCandidateProcessHistoryItem_CandidateProfileInput!
  """The details of the `CandidateProcessHistoryItem` to be added to the `CandidateProfile`."""
  candidateProcessHistoryItem: CreateCandidateProcessHistoryItem_CandidateProcessHistoryItemInput!
}

"""The output parameter for the `createCandidateProcessHistoryItem` mutation."""
union CreateCandidateProcessHistoryItemPayload = CreateCandidateProcessHistoryItemPayload_Conflict | CreateCandidateProcessHistoryItemPayload_Success

"""The conflict result for the `createCandidateProcessHistoryItem` mutation."""
type CreateCandidateProcessHistoryItemPayload_Conflict {
  """The details of the conflicting `CandidateProcessHistoryItem`."""
  conflictingCandidateProcessHistoryItem: CandidateProcessHistoryItem!
  """The `CandidateProfile` that the `CandidateProcessHistoryItem` belongs to."""
  candidateProfile: CandidateProfile!
}

"""The success result for the `createCandidateProcessHistoryItem` mutation."""
type CreateCandidateProcessHistoryItemPayload_Success {
  """The details of the `CandidateProcessHistoryItem` created."""
  candidateProcessHistoryItem: CandidateProcessHistoryItem!
  """The `CandidateProfile` that the `CandidateProcessHistoryItem` belongs to."""
  candidateProfile: CandidateProfile!
}

"""The candidate process history to create."""
input CreateCandidateProcessHistoryItem_CandidateProcessHistoryItemInput {
  """
  An identifier to ensure that multiple candidate process history items are not created on retries.
  
  The identifier must be unique within the given candidate profile.
  The same identifier must be provided when retrying after create failures.
  """
  idempotencyId: String!
  """The date & time the action was executed."""
  actionDate: DateTime!
  """
  The executed action that constitutes this history item.
  
  This action may or may not trigger a change in the status of the underlying process.
  For example, an action may be to add a note against a candidate's profile,
  which has no material effect on the stage through the application process.
  """
  action: CandidateProcessActionInput!
  """
  The current status of the underlying process.
  
  For example, a candidate in an application process may progress through a series of statuses like applied, interviewed, offered, hired.
  """
  status: CandidateProcessStatusInput
  """
  The position profile that the history item relates to.
  
  This is null for interactions that are not specific to an individual position,
  such as a general interview with a recruiter.
  """
  positionProfile: CandidateProcessHistoryItem_PositionProfileInput
  """
  The underlying source for the item.
  
  For example, items related to an application process would note the job board or other channel that sourced the application.
  
  This is required if `positionProfile` is specified.
  """
  seekSource: SeekProcessHistoryItemSourceInput
  """The parties that executed the action."""
  primaryParties: [CandidateProcessPartyInput!]!
}

"""The candidate profile that the process history item belongs to."""
input CreateCandidateProcessHistoryItem_CandidateProfileInput {
  """The identifier for the `CandidateProfile` that the `CandidateProcessHistoryItem` relates to."""
  profileId: String!
}

"""The input parameter for the `createPositionOpening` mutation."""
input CreatePositionOpeningInput {
  """The details of the position opening to be created."""
  positionOpening: CreatePositionOpening_PositionOpeningInput!
}

"""The output parameter for the `createPositionOpening` mutation."""
type CreatePositionOpeningPayload {
  """The details of the created position opening."""
  positionOpening: PositionOpening!
}

"""The details of the position opening to be created."""
input CreatePositionOpening_PositionOpeningInput {
  """The party that owns the position opening."""
  postingRequester: PostingRequesterInput!
  """
  An optional field for storing additional data with a `PositionOpening`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
  """
  The status of the position opening.
  
  Defaults to `Active` if no value is provided.
  
  Currently, three codes are defined:
  
  - `Incomplete` indicates the position opening is in draft.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String
}

"""A collection of information about where and how to post a job ad."""
input CreatePostingInstructionInput {
  """
  A SEEK ANZ advertisement type code.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic advertisement.
  - `StandOut` indicates a StandOut advertisement.
  - `Premium` indicates a Premium advertisement.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is required.
  - For other schemes, set this to `null`.
  """
  seekAnzAdvertisementType: String
  """
  The end date of the posting.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme this must be no more than 30 days in the future.
    If the end date is not specified it will default to the maximum period of 30 days.
  """
  end: DateTime
  """
  An identifier to ensure that multiple ads are not created on retries.
  
  The identifier must be unique for each position profile created.
  The same identifier must be provided when retrying after create failures.
  """
  idempotencyId: String!
  """
  An array of methods for applying to the position.
  
  If no methods are provided, SEEK's native apply form will be used to receive candidate applications.
  Native applications will raise a `CandidateApplicationCreated` event that points to a `CandidateProfile` object.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is limited to a single element.
    Requests with more than 1 element will fail.
  """
  applicationMethods: [ApplicationMethodInput!]
  """
  The identifier for the `AdvertisementBranding` to apply to the posted job ad.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field's behavior is dependent on the `SeekAnzAdProductFeatures` of the product set in the `seekAnzAdvertisementType` field.
  
    When the product's `SeekAnzAdProductFeatures`.`brandingIndicator` value is false, this field will be silently ignored.
  """
  brandingId: String
}

"""The input parameter for the `createUnpostedPositionProfileForOpening` mutation."""
input CreateUnpostedPositionProfileForOpeningInput {
  """An unposted profile of a position opening to create."""
  positionProfile: CreateUnpostedPositionProfileForOpeningPositionProfileInput!
}

"""The output parameter for the `createUnpostedPositionProfileForOpening` mutation."""
type CreateUnpostedPositionProfileForOpeningPayload {
  """Attributes of the newly created unposted position profile."""
  positionProfile: UnpostedPositionProfile!
}

"""An unposted profile of a position opening to create."""
input CreateUnpostedPositionProfileForOpeningPositionProfileInput {
  """The identifier for the `PositionOpening` that this position profile belongs to."""
  positionOpeningId: String!
  """
  A human-readable name given to the profile.
  
  This in addition to the `positionTitle` can help identify the profile to an end user.
  """
  profileName: String
  """
  A short phrase describing the position as it would be listed on a business card or in a company directory.
  
  This field has a maximum length of 80 bytes in UTF-8 encoding.
  """
  positionTitle: String!
  """
  An array of identifiers for the `HiringOrganization`s that have the position.
  
  For unposted position profiles,
  this should contain exactly one element that matches the `postingRequester` on the position opening.
  """
  positionOrganizations: [String!]!
  """
  An optional hirer-provided opaque job reference.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  SEEK does not use this field on unposted position profiles.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekBillingReference: String
  """
  An array of formatted position profile descriptions.
  
  A maximum of 10 formatted descriptions may be provided.
  """
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  An array of `JobCategory` identifiers.
  
  A maximum of 10 job categories may be provided.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  A maximum of 10 locations may be provided.
  """
  positionLocation: [String!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""The input parameter for the `createWebhookSubscription` mutation."""
input CreateWebhookSubscriptionInput {
  """The details of the webhook subscription to be created."""
  webhookSubscription: CreateWebhookSubscription_SubscriptionInput!
}

"""The output parameter for the `createWebhookSubscription` mutation."""
union CreateWebhookSubscriptionPayload = CreateWebhookSubscriptionPayload_Conflict | CreateWebhookSubscriptionPayload_Success

"""The conflict result for the `createWebhookSubscription` mutation."""
type CreateWebhookSubscriptionPayload_Conflict {
  """The details of the conflicting webhook subscription."""
  conflictingWebhookSubscription: WebhookSubscription!
}

"""The success result for the `createWebhookSubscription` mutation."""
type CreateWebhookSubscriptionPayload_Success {
  """The details of the created webhook subscription."""
  webhookSubscription: WebhookSubscription!
}

"""The details of the webhook subscription to be created."""
input CreateWebhookSubscription_SubscriptionInput {
  """
  The type of event to subscribe to.
  
  See `Event` implementations for a list of supported values.
  """
  eventTypeCode: String!
  """
  The data source for the event.
  
  This commonly refers to a SEEK brand.
  See the relevant `Event` implementation for a list of supported schemes.
  """
  schemeId: String!
  """
  The optional hirer ID to receive events from.
  
  By default webhook subscriptions will send events from all hirers the partner has access to.
  Providing a hirer ID will filter events to the specified hirer.
  """
  hirerId: String
  """The subscriber-owned URL where events will be sent to."""
  url: String!
  """
  The maximum number of events that will be sent in each HTTP request.
  
  This number must be between 1 and 10 inclusive. Defaults to 10.
  """
  maxEventsPerAttempt: Int
  """
  The algorithm for signing webhooks.
  
  Currently, two codes are defined:
  
  - `None` indicates no signature will be attached.
  - `SeekHmacSha512` indicates a HMAC SHA-512 hex digest will be attached to each request as a `Seek-Signature` header.
  
  A webhook's signature can be used to validate that the request originated from SEEK.
  
  Use a constant-time algorithm to validate the signature.
  Regular comparison methods like the `==` operator are susceptible to timing attacks.
  """
  signingAlgorithmCode: String!
  """
  The secret for signing webhooks.
  
  This must be specified if `signingAlgorithmCode` is not `None`.
  It is used as the key to generate a message authentication code for each request.
  
  The secret should be a random string with high entropy that is not reused for any other purpose.
  """
  secret: String
}

"""
A monetary amount expressed as an integer in a specified minor currency unit.

This is used to avoid floating point rounding errors when expressing prices & funds.
"""
type CurrencyMinorUnit {
  """
  A non-negative integer in the minor currency unit for the ISO currency code.
  
  For example, this is the number of cents in dollar-denominated currencies.
  """
  value: Int!
  """The three-letter ISO 4217 currency code, in uppercase."""
  currency: String!
}

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""The input parameter for the `deleteCandidateProcessHistoryItem` mutation."""
input DeleteCandidateProcessHistoryItemInput {
  """The details of the  `CandidateProcessHistoryItem` to be deleted."""
  candidateProcessHistoryItem: DeleteCandidateProcessHistoryItem_CandidateProcessHistoryItemInput!
}

"""The output parameter for the `deleteCandidateProcessHistoryItem` mutation."""
type DeleteCandidateProcessHistoryItemPayload {
  """The details of the `CandidateProcessHistoryItem` that was deleted."""
  candidateProcessHistoryItem: CandidateProcessHistoryItem!
}

"""The details of the `CandidateProcessHistoryItem` to be deleted."""
input DeleteCandidateProcessHistoryItem_CandidateProcessHistoryItemInput {
  """The identifier for the `CandidateProcessHistoryItem` to be deleted."""
  id: String!
}

"""The input parameter for the `deletePositionOpening` mutation."""
input DeletePositionOpeningInput {
  """The details of the position opening to be deleted."""
  positionOpening: DeletePositionOpening_PositionOpeningInput!
}

"""The output parameter for the `deletePositionOpening` mutation."""
type DeletePositionOpeningPayload {
  """The details of the deleted position opening."""
  positionOpening: PositionOpening!
}

"""The details of the position opening to be deleted."""
input DeletePositionOpening_PositionOpeningInput {
  """The identifier for the `PositionOpening` to be deleted."""
  documentId: String!
}

"""The input parameter for the `deleteUnpostedPositionProfile` mutation."""
input DeleteUnpostedPositionProfileInput {
  """The details of the unposted position profile to be deleted."""
  positionProfile: DeleteUnpostedPositionProfile_PositionProfileInput!
}

"""The output parameter for the `deleteUnpostedPositionProfile` mutation."""
type DeleteUnpostedPositionProfilePayload {
  """The details of the deleted unposted position profile."""
  positionProfile: UnpostedPositionProfile!
}

"""The details of the unposted position profile to be deleted."""
input DeleteUnpostedPositionProfile_PositionProfileInput {
  """The identifier for the unposted `PositionProfile`."""
  profileId: String!
}

"""The input parameter for the `deleteUploadedCandidate` mutation."""
input DeleteUploadedCandidateInput {
  """The details of the uploaded `Candidate` to be deleted."""
  candidate: DeleteUploadedCandidate_CandidateInput!
}

"""The output parameter for the `deleteUploadedCandidate` mutation."""
type DeleteUploadedCandidatePayload {
  """
  The details of the uploaded candidate that was deleted.
  
  The uploaded candidate profile is available in the `profiles` field.
  """
  candidate: Candidate!
}

"""The details of the uploaded candidate to be deleted."""
input DeleteUploadedCandidate_CandidateInput {
  """The identifier for the uploaded `Candidate` to be deleted."""
  documentId: String!
}

"""The input parameter for the `deleteWebhookSubscription` mutation."""
input DeleteWebhookSubscriptionInput {
  """The details of the webhook subscription to be deleted."""
  webhookSubscription: DeleteWebhookSubscription_SubscriptionInput!
}

"""The output parameter for the `deleteWebhookSubscription` mutation."""
type DeleteWebhookSubscriptionPayload {
  """The details of the deleted webhook subscription."""
  webhookSubscription: WebhookSubscription!
}

"""The details of the webhook subscription to be deleted."""
input DeleteWebhookSubscription_SubscriptionInput {
  """The identifier for the `WebhookSubscription`."""
  id: String!
}

"""Instructions on how a candidate should be distributed."""
type DistributionGuidelines {
  """
  The SEEK products that the candidate may be surfaced in.
  
  Currently, two codes are defined:
  
  - `CandidateManagement` indicates that the candidate may be viewed in SEEK Candidate Management.
  - `ProactiveSourcing` indicates that the candidate may be viewed in SEEK Talent Search.
  """
  seekProductCodes: [String!]!
}

"""Instructions on how a candidate should be distributed."""
input DistributionGuidelinesInput {
  """
  The SEEK products that the candidate may be surfaced in.
  
  Currently, one code is defined:
  
  - `ProactiveSourcing` indicates that the candidate may be viewed in SEEK Talent Search.
  """
  seekProductCodes: [String!]!
}

"""The details documenting a person's attendance at an educational institution."""
type EducationAttendance {
  """The institution the person attended."""
  institution: Organization!
  """The degrees which were awarded or in process at the institution."""
  educationDegrees: [EducationDegree!]!
  """
  Additional free text descriptions of the person's attendance at the institution.
  
  This typically includes activities, honours, awards or specialities achieved during their study.
  """
  descriptions: [String!]!
}

"""The details of a student's degree."""
type EducationDegree {
  """The name of the degree."""
  name: String!
  """
  The granted status of the degree.
  
  Currently, two statuses are defined:
  
  - `InProgress` indicates the student is still completing the degree.
  - `Granted` indicates the degree has been granted to the student.
  """
  degreeGrantedStatus: String!
  """
  The date the degree was granted or is expected to be granted.
  
  This may only contain a year and optional month, e.g. `2020` or `2020-06`.
  If the date isn't known this will be `null`.
  """
  date: HistoryDate
}

"""A time period for which an associated object is effective."""
type EffectiveTimePeriod {
  """
  The date which the associated object is no longer effective.
  
  For example, this corresponds to the expiry date of certifications.
  This will be `null` if the associated object does not expire.
  """
  validTo: HistoryDate
}

"""An email address."""
type Email {
  """The email address."""
  address: String!
}

"""An email address."""
input EmailInput {
  """The email address."""
  address: String!
}

"""The details of a person's employment, work, or relevant experience."""
type EmployerHistory {
  """The specific organization to which the person held positions."""
  organization: Organization!
  """The set of positions that the person held."""
  positionHistories: [PositionHistory!]!
}

"""
A signal that an action has been performed on the SEEK platform that may be of interest to an integration partner.

Events can be delivered via:

- Webhook, using the `createWebhookSubscription` mutation
- GraphQL polling, using the paginated `events` query
"""
interface Event {
  """The identifier for the `Event`."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  This commonly refers to a SEEK brand.
  See the relevant `Event` implementation for a list of supported schemes.
  """
  schemeId: String!
  """
  The type of event.
  
  See `Event` implementations for a list of supported values.
  """
  typeCode: String!
  """
  The date & time the event was created.
  
  This is commonly linked to the creation of an object that can be retrieved from the SEEK API.
  
  The data source for this field differs by event type and scheme.
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  A maximum of 100 webhook attempts can be returned in a single page.
  Additional webhook attempts can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}

"""An event in a stream."""
type EventEdge {
  """
  The opaque cursor to the event in the stream.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual event."""
  node: Event!
  """
  The date & time the event was added to the stream.
  
  Initial `afterDateTime` and `beforeDateTime` filters apply to this field.
  """
  streamDateTime: DateTime!
}

"""A page of events from a stream."""
type EventsConnection {
  """The page of events and their corresponding cursors."""
  edges: [EventEdge!]!
  """The pagination metadata for this page of events."""
  pageInfo: PageInfo!
}

"""
The criteria to filter events by.

These are `Event`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input EventsFilterInput {
  """
  The stream date & time that resulting events must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `EventsConnection`.
  """
  afterDateTime: DateTime
  """
  The stream date & time that resulting events must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `EventsConnection`.
  """
  beforeDateTime: DateTime
  """
  Whether the event was successfully delivered via the specified webhook `subscriptionId`.
  
  This filter does not apply if `subscriptionId` is not specified.
  """
  deliveredIndicator: Boolean
  """
  The types of events to retrieve.
  
  See `Event` implementations for a list of supported values.
  """
  eventTypeCodes: [String!]
  """
  The subscription stream to retrieve events from.
  
  This can be used in combination with `deliveredIndicator` to identify events that were not successfully delivered through a particular webhook subscription.
  
  To consume events solely through GraphQL polling, do not specify this field.
  This will retrieve events from a persistent stream that is not associated with a webhook subscription.
  """
  subscriptionId: String
}

"""A geographical coordinate."""
type GeoLocation {
  """The latitude of the geographical location."""
  latitude: Float!
  """The longitude of the geographical location."""
  longitude: Float!
}

"""A geographical coordinate."""
input GeoLocationInput {
  """The latitude of the geographical location."""
  latitude: Float!
  """The longitude of the geographical location."""
  longitude: Float!
}

"""An organization hiring for an open position."""
type HiringOrganization {
  """The identifier for the `HiringOrganization`."""
  id: ObjectIdentifier!
  """The name of the hiring organization."""
  name: String!
  """
  The capabilities of the requesting partner to act on behalf of the hiring organization.
  
  This will be `null` for agencies; the SEEK API does not support acting on behalf of an agency.
  """
  seekApiCapabilities: HiringOrganizationApiCapabilities
  """
  The legacy SEEK ANZ advertiser ID.
  
  This is a numeric identifier used by legacy Job Posting & Application Export APIs in the `seekAnz` scheme.
  For organizations in other schemes this will be `null`.
  """
  seekAnzAdvertiserId: Int
}

"""
The capabilities of the requesting partner to act on behalf of a hirer.

This provides a read-only view of the configuration of a SEEK hirer for the current partner.
"""
type HiringOrganizationApiCapabilities {
  """
  The active relationship types between the requesting partner and the hirer.
  
  Currently, three codes are defined:
  
  - `ApplicationExport` enables exporting candidate applications from SEEK's native apply functionality.
  
  - `JobPosting` enables posting job ads to SEEK's job boards.
  
  - `ProactiveSourcing` enables hirers to proactively search for and connect with suitable candidates.
  """
  relationshipTypeCodes: [String!]!
  """
  The supported methods of applying to job ads posted by the hirer.
  
  All SEEK hirers can use SEEK's native apply functionality by omitting the `ApplicationMethod` object when posting.
  This enumerates additional application methods SEEK has configured for the hirer.
  
  Currently, one code is defined:
  
  - `ApplicationUri` indicates that job ads can link out to an external apply form.
  """
  applicationMethodCodes: [String!]!
}

"""A hirer in a paginated list."""
type HiringOrganizationEdge {
  """
  The opaque cursor to the hirer.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual hirer."""
  node: HiringOrganization!
}

"""A page of hirers."""
type HiringOrganizationsConnection {
  """The page of hirers and their corresponding cursors."""
  edges: [HiringOrganizationEdge!]!
  """The pagination metadata for this page of hirers."""
  pageInfo: PageInfo!
}

"""
The criteria to filter hirers by.

These are `HiringOrganization`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input HiringOrganizationsFilterInput {
  """
  Filters on relationship types between the hirer and requesting partner.
  
  See the `HiringOrganizationApiCapabilities` documentation for a list of supported event types.
  
  If this is not provided then all related hirers are returned.
  """
  relationshipTypeCodes: [String!]
  """
  Filters on hirer names containing the provided case-insensitive substring.
  
  This is intended to support ad-hoc searches for hirers by name.
  """
  nameSearch: String
}

"""
A date string compliant with the ISO 8601 "year", "year and month" or "complete date" formats.

For example, `"2020"`, `"2020-05"` and `"2020-05-27"` are all valid for `HistoryDate`.

This is used for dates in a candidate's position & employment histories where the precise month or day may not have been provided.
"""
scalar HistoryDate

"""The category of a job's occupation."""
type JobCategory {
  """The identifier for the `JobCategory`."""
  id: ObjectIdentifier!
  """
  The parent job category.
  
  This is a more general classification that this category belongs to.
  It will be `null` for root categories that do not belong to a more general classification.
  """
  parent: JobCategory
  """
  An array of child job categories.
  
  These are more specific categories that belong to this general classification.
  """
  children: [JobCategory!]
  """Name of the job category."""
  name: String!
}

"""A job category with information of the suggested choice."""
type JobCategorySuggestionChoice {
  """The job category information of the suggestion choice."""
  jobCategory: JobCategory!
  """
  The confidence in the returned job category based on the suggestion input.
  
  This is a floating point value ranging from 0 (lowest) to 1 (highest).
  """
  confidence: Float!
}

"""The input parameter for the `jobCategorySuggestions` query."""
input JobCategorySuggestionPositionProfileInput {
  """The position title."""
  positionTitle: String!
  """An array of identifiers for the position's `Location`s."""
  positionLocation: [String!]!
  """
  An array of identifiers for the `HiringOrganization`s that have the position.
  
  Information such as the organization's domicile can be used to refine the returned suggestions.
  """
  positionOrganizations: [String!]
  """
  The descriptions for the position profile.
  
  Currently, only the `AdvertisementDetails` description is used.
  Other descriptions will be accepted but are ignored when determining the relevance of suggestion.
  """
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]
}

"""A physical address with a persistent identifier."""
type Location {
  """The identifier for the `Location`."""
  id: ObjectIdentifier!
  """The parent location."""
  parent: Location
  """An array of child locations."""
  children: [Location!]
  """The location name."""
  name: String!
  """Contextual name of the location."""
  contextualName: String!
  """The two-letter ISO 3166-1:2013 country code, in uppercase."""
  countryCode: String!
}

"""A suggested location."""
type LocationSuggestion {
  """Location information of the choice."""
  location: Location!
}

"""
The schema's entry-point for mutations.

This acts as the public, top-level API from which all mutation queries must start.
"""
type Mutation {
  """A placeholder string."""
  _empty: String @deprecated(reason: "Placeholder only")
  """
  Creates a new questionnaire.
  
  This mutation accepts browser tokens that include the `mutate:application-questionnaires` scope.
  """
  createApplicationQuestionnaire(input: CreateApplicationQuestionnaireInput!): CreateApplicationQuestionnairePayload!
  """
  Creates a new position opening.
  
  Every position profile belongs to a position opening.
  Multiple position profiles may belong to the same position opening.
  """
  createPositionOpening(input: CreatePositionOpeningInput!): CreatePositionOpeningPayload!
  """Replaces an existing position opening's person contacts."""
  updatePositionOpeningPersonContacts(input: UpdatePositionOpeningPersonContactsInput!): UpdatePositionOpeningPersonContactsPayload
  """
  Update the status of a position opening.
  
  This status is provided to help hirers manage position openings.
  The SEEK API does not use the position opening's status itself.
  """
  updatePositionOpeningStatus(input: UpdatePositionOpeningStatusInput!): UpdatePositionOpeningStatusPayload
  """
  Deletes an empty position opening.
  
  Each position profile that belongs to a position opening must be deleted before the position opening can be deleted.
  """
  deletePositionOpening(input: DeletePositionOpeningInput!): DeletePositionOpeningPayload
  """Creates a new position profile for an opening and posts it."""
  postPositionProfileForOpening(input: PostPositionProfileForOpeningInput!): PostPositionProfileForOpeningPayload!
  """
  Updates an existing posted position profile.
  
  The position profile's existing fields will be replaced with the provided input fields.
  This will update the position's live job ad under its current URL.
  """
  updatePostedPositionProfile(input: UpdatePostedPositionProfileInput!): UpdatePostedPositionProfilePayload
  """
  Closes an existing posted position profile.
  
  The job ad will be removed from the job board and no refund will be issued.
  The `PositionProfile` and its associated candidate applications will be available for 6 months after its close date.
  """
  closePostedPositionProfile(input: ClosePostedPositionProfileInput!): ClosePostedPositionProfilePayload
  """Posts a live job ad for a new position."""
  postPosition(input: PostPositionInput!): PostPositionPayload!
  """Creates a new unposted position profile for an opening."""
  createUnpostedPositionProfileForOpening(input: CreateUnpostedPositionProfileForOpeningInput!): CreateUnpostedPositionProfileForOpeningPayload!
  """Updates an existing unposted position profile."""
  updateUnpostedPositionProfile(input: UpdateUnpostedPositionProfileInput!): UpdateUnpostedPositionProfilePayload
  """Deletes an unposted position profile."""
  deleteUnpostedPositionProfile(input: DeleteUnpostedPositionProfileInput!): DeleteUnpostedPositionProfilePayload
  """
  Delete an uploaded candidate and their profile from SEEK's systems.
  
  This will also delete all `CandidateProcessHistoryItem`s belonging to the candidate profile.
  """
  deleteUploadedCandidate(input: DeleteUploadedCandidateInput!): DeleteUploadedCandidatePayload
  """Upload a candidate and their profile into SEEK's systems."""
  uploadCandidate(input: UploadCandidateInput!): UploadCandidatePayload!
  """Update the personal details of an uploaded candidate."""
  updateUploadedCandidatePerson(input: UpdateUploadedCandidatePersonInput!): UpdateUploadedCandidatePersonPayload
  """Update the actions associated with an uploaded candidate profile."""
  updateUploadedCandidateProfileActions(input: UpdateUploadedCandidateProfileActionsInput!): UpdateUploadedCandidateProfileActionsPayload
  """Update the dates associated with an uploaded candidate profile."""
  updateUploadedCandidateProfileDates(input: UpdateUploadedCandidateProfileDatesInput!): UpdateUploadedCandidateProfileDatesPayload
  """Update the position preferences associated with an uploaded candidate profile."""
  updateUploadedCandidateProfilePositionPreferences(input: UpdateUploadedCandidateProfilePositionPreferencesInput!): UpdateUploadedCandidateProfilePositionPreferencesPayload
  """Add a process history item to an uploaded candidate's profile."""
  createCandidateProcessHistoryItem(input: CreateCandidateProcessHistoryItemInput!): CreateCandidateProcessHistoryItemPayload!
  """Delete a candidate process history item from SEEK's systems."""
  deleteCandidateProcessHistoryItem(input: DeleteCandidateProcessHistoryItemInput!): DeleteCandidateProcessHistoryItemPayload
  """Update a candidate process history item."""
  updateCandidateProcessHistoryItem(input: UpdateCandidateProcessHistoryItemInput!): UpdateCandidateProcessHistoryItemPayload
  """Creates a new webhook subscription."""
  createWebhookSubscription(input: CreateWebhookSubscriptionInput!): CreateWebhookSubscriptionPayload!
  """
  Updates an existing webhook subscription's delivery configuration.
  
  This modifies fields related to the URL and payload of an existing webhook subscription.
  Changes may take up to half an hour to take effect.
  
  The fields that determine which events are to be delivered are immutable.
  A new webhook subscription should be created for such cases.
  """
  updateWebhookSubscriptionDeliveryConfiguration(input: UpdateWebhookSubscriptionDeliveryConfigurationInput!): UpdateWebhookSubscriptionDeliveryConfigurationPayload
  """
  Updates an existing webhook subscription's signing configuration.
  
  This modifies fields related to the signature of an existing webhook subscription.
  Changes may take up to half an hour to take effect.
  """
  updateWebhookSubscriptionSigningConfiguration(input: UpdateWebhookSubscriptionSigningConfigurationInput!): UpdateWebhookSubscriptionSigningConfigurationPayload
  """Deletes an existing webhook subscription."""
  deleteWebhookSubscription(input: DeleteWebhookSubscriptionInput!): DeleteWebhookSubscriptionPayload
  """
  Replays a webhook subscription.
  
  This causes any matching events to be requeued for delivery.
  
  Resending occurs asynchronously in a background task.
  """
  replayWebhookSubscription(input: ReplayWebhookSubscriptionInput!): ReplayWebhookSubscriptionPayload
}

"""An opaque identifier for GraphQL objects."""
type ObjectIdentifier {
  """The identifier itself."""
  value: String!
}

"""Basic information to identify and reference a specific organization."""
type Organization {
  """The human readable name of the organization."""
  name: String!
}

"""Basic information to identify and reference a specific organization."""
input OrganizationInput {
  """The human readable name of the organization."""
  name: String!
}

"""
Pagination metadata for a result list.

This is compliant with the _Relay Cursor Connections Specification_:

<https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo>
"""
type PageInfo {
  """Whether there is a previous page of results at the time of retrieval."""
  hasPreviousPage: Boolean!
  """Whether there is a next page of results at the time of retrieval."""
  hasNextPage: Boolean!
  """An opaque string cursor for retrieving the previous page of results."""
  startCursor: String
  """An opaque string cursor for retrieving the next page of results."""
  endCursor: String
}

"""A skill or competency asserted by the candidate."""
type PersonCompetency {
  """The human readable name of the competency."""
  competencyName: String!
}

"""The name of a person including a breakdown of name components."""
type PersonName {
  """The formatted name of a person, as it would be written out together."""
  formattedName: String!
  """The given name of a person, if provided."""
  given: String
  """The family name (or surname) of a person, if provided."""
  family: String
}

"""The name of a person associated with an object."""
input PersonNameInput {
  """The formatted name of a person, as it would be written out together."""
  formattedName: String!
  """The optional given name of a person."""
  given: String
  """The optional family name (or surname) of a person."""
  family: String
}

"""The phone number of a person."""
type Phone {
  """The phone number represented as a human readable string."""
  formattedNumber: String!
}

"""The phone number of a person."""
input PhoneInput {
  """The phone number represented as a human readable string."""
  formattedNumber: String!
}

"""A formatted description of the position profile."""
type PositionFormattedDescription {
  """The description type."""
  descriptionId: PositionFormattedDescriptionIdentifier!
  """The HTML content of the description."""
  content: String!
}

"""
A description type identifier.

This specifies the meaning of the description and determines where it's presented to the candidate.
"""
type PositionFormattedDescriptionIdentifier {
  """
  The description type.
  
  Currently, three identifiers are defined:
  
  - `AdvertisementDetails` is the detailed description of the position that appears on the job ad.
  - `SearchBulletPoint` is a highlight or selling point of the position that appears in search results.
    SEEK ANZ allows up to three search bullet points when `SeekAnzAdProductFeatures`'s `searchBulletPointsIndicator` is true.
  - `SearchSummary` is a short description that appears in search results.
  """
  value: String!
}

"""A formatted description of the position profile."""
input PositionFormattedDescriptionInput {
  """
  The description type.
  
  Currently, three identifiers are defined:
  
  - `AdvertisementDetails` is the detailed description of the position that appears on the job ad.
  - `SearchBulletPoint` is a highlight or selling point of the position that appears in search results.
    SEEK ANZ allows up to three search bullet points when `SeekAnzAdProductFeatures`'s `searchBulletPointsIndicator` is true.
  - `SearchSummary` is a short description that appears in search results.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires `AdvertisementDetails` and `SearchSummary` to be included.
  """
  descriptionId: String!
  """
  The HTML content of the description.
  
  The maximum length differs by `descriptionId`:
  
    - `AdvertisementDetails` has a maximum length of 20,000 bytes in UTF-8 encoding.
    - `SearchBulletPoint` has a maximum length of 80 bytes in UTF-8 encoding.
    - `SearchSummary` has a maximum length of 150 bytes in UTF-8 encoding.
  
  Scheme requirements:
  
  - The `seekAnz` scheme supports the following HTML tags in `AdvertisementDetails`:
  
    - `a` (Available on a per hirer basis. Hirer must contact SEEK to enable.)
    - `br`
    - `div`
    - `em`
    - `h2`
    - `li`
    - `ol`
    - `p`
    - `strong`
    - `ul`
  
    Other descriptions will have all HTML tags stripped.
  """
  content: String!
}

"""The details about a person's tenure within the position."""
type PositionHistory {
  """
  The start date of the position.
  
  This may only contain the year and month, e.g. `2019-01`.
  """
  start: HistoryDate!
  """
  The end date of the position if known.
  
  This may only contain the year and month, e.g. `2020-01`.
  """
  end: HistoryDate
  """Whether the person is still working at the organization, if known."""
  current: Boolean
  """The title that the person held for this position."""
  title: String!
  """An array of descriptions of the person's responsibilities, skills and achievements in the position."""
  descriptions: [String!]!
}

"""
A job requisition or position opening within an organization.

This is a container object that groups multiple `PositionProfile`s together along with their owner.
"""
type PositionOpening {
  """
  The status of the position opening.
  
  Currently, three codes are defined:
  
  - `Incomplete` indicates the position opening is in a draft state.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String!
  """The identifier for the `PositionOpening`."""
  documentId: ObjectIdentifier!
  """
  An optional field for storing additional data with a `PositionOpening`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
  """
  The party that owns the position opening.
  
  This may be different from the hiring organization if the position opening is created by a recruitment agency.
  """
  postingRequester: PostingRequester!
  """
  An array of profiles for the position opening.
  
  Each profile represents a posted job ad or an unposted internal requisition associated with this opening.
  """
  positionProfiles: [PositionProfile!]!
}

"""A page of position openings."""
type PositionOpeningConnection {
  """
  The page of position openings and their corresponding cursors.
  
  This list may be empty.
  """
  edges: [PositionOpeningEdge!]!
  """The pagination metadata for this page of position openings."""
  pageInfo: PageInfo!
}

"""A position opening in a paginated list."""
type PositionOpeningEdge {
  """
  The opaque cursor to the position opening.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual position opening."""
  node: PositionOpening!
}

"""
The criteria to filter position openings by.

These are `PositionOpening`-specific extensions on top of the standard pagination arguments `after` and `first`.
"""
input PositionOpeningsFilterInput {
  """
  Optionally filter results to only include position openings with the specified status code.
  
  Currently, three codes are defined:
  
  - `Incomplete` indicates the position opening is in a draft state.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String
}

"""A candidate's preferences in an ideal position."""
type PositionPreference {
  """
  An array of locations which are preferred by the candidate.
  
  The locations are ordered in descending preference.
  """
  locations: [PreferredLocation!]!
}

"""A candidate's preferences in an ideal position."""
input PositionPreferenceInput {
  """
  An array of locations which are preferred by the candidate.
  
  The locations are ordered in descending preference.
  
  A maximum of 5 locations may be provided.
  """
  locations: [PreferredLocationInput!]!
}

"""
A profile of a position opening.

This contains information of how a position opening is presented on a job board or as an internal requisition.
"""
interface PositionProfile {
  """The identifier for the `PositionProfile`."""
  profileId: ObjectIdentifier!
  """The `PositionOpening` that this profile was created under."""
  positionOpening: PositionOpening!
  """
  The type of position profile.
  
  See `PositionProfile` implementations for a list of supported values.
  """
  seekTypeCode: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """The organization which has the position."""
  positionOrganizations: [HiringOrganization!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  This appears on the invoice when SEEK bills the hirer for a job ad.
  """
  seekBillingReference: String
  """
  The public web URL of the posted job ad.
  
  This will be the profile's object identifier for unposted position profiles.
  """
  positionUri: String!
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescription!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  If the offered schedule isn't known this will be `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackage!
  """
  A work type code for the `seekAnz` scheme.
  
  Currently, four codes are defined:
  
  - `Casual` indicates a casual position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  
  For positions in other schemes this will be `null`.
  """
  seekAnzWorkTypeCode: String
  """The occupational categories of the job."""
  jobCategories: [JobCategory!]!
  """The locations of the position."""
  positionLocation: [Location!]!
  """
  The set of questions presented to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaire: ApplicationQuestionnaire
  """The video to render within the advertisement."""
  seekVideo: SeekVideo
  """The instructions related to posting the job ad."""
  postingInstructions: [PostingInstruction!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""The event signaling that a posted `PositionProfile` has been closed."""
type PositionProfileClosedEvent implements Event {
  """The identifier for the `Event`."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - `seekAnz`
  """
  schemeId: String!
  """The type of event, i.e. `PositionProfileClosed`."""
  typeCode: String!
  """
  The date & time the `PositionProfile` was closed.
  
  `PositionProfile`s are closed automatically when they reach their `PostingInstruction`'s `end` date.
  They can also be closed early using the `closePostedPositionProfile` mutation.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """The identifier for the `PositionProfile` that was closed."""
  positionProfileId: String!
  """
  The `PositionProfile` that was closed.
  
  This may return null if the `PositionProfile` has been closed for an extended period of time.
  """
  positionProfile: PostedPositionProfile
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  A maximum of 100 webhook attempts can be returned in a single page.
  Additional webhook attempts can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}

"""The event signaling that a `PositionProfile` has been posted."""
type PositionProfilePostedEvent implements Event {
  """The identifier for the `Event`."""
  id: ObjectIdentifier!
  """
  The data source for the event.
  
  The following schemes are supported for this event type:
  
  - `seekAnz`
  """
  schemeId: String!
  """The type of event, i.e. `PositionProfilePosted`."""
  typeCode: String!
  """
  The date & time the `PositionProfile` was considered as successfully posted inside of SEEK's internal systems.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """The identifier for the `PositionProfile` that was posted."""
  positionProfileId: String!
  """
  The `PositionProfile` that was posted.
  
  This may return null if the `PositionProfile` has been closed for an extended period of time.
  """
  positionProfile: PostedPositionProfile
  """
  A page of webhook attempts for the current event matching the specified criteria.
  
  A maximum of 100 webhook attempts can be returned in a single page.
  Additional webhook attempts can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttempts(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
  ): WebhookAttemptsConnection!
}

"""The information required to post a job ad for a newly created position."""
input PostPositionInput {
  """The details of the position opening to be created."""
  positionOpening: CreatePositionOpening_PositionOpeningInput!
  """A profile of a position opening."""
  positionProfile: PostPosition_PositionProfileInput!
}

"""The output parameter for the `postPosition` mutation."""
union PostPositionPayload = PostPositionPayload_Success | PostPositionPayload_Conflict

"""
The conflict result for the `postPosition` mutation.

The  `idempotencyId` provided as part of `CreatePostingInstructionInput` while creating a position profile must be unique.
Providing the same `idempotencyId` will result in a conflict.
"""
type PostPositionPayload_Conflict {
  """Attributes of the conflicting position opening."""
  conflictingPositionOpening: PostPosition_PositionOpeningPayload!
  """Attributes of the conflicting position profile."""
  conflictingPositionProfile: PostPosition_PositionProfilePayload!
}

"""The success result for the `postPosition` mutation."""
type PostPositionPayload_Success {
  """Attributes of the newly created position opening."""
  positionOpening: PostPosition_PositionOpeningPayload!
  """Attributes of the newly created position profile."""
  positionProfile: PostPosition_PositionProfilePayload!
}

"""The input parameter for the `postPositionProfileForOpening` mutation."""
input PostPositionProfileForOpeningInput {
  """
  A profile for posting a job ad against an existing position opening.
  
  This contains information of how a position opening is presented on a given channel or job board.
  """
  positionProfile: PostPositionProfileForOpeningPositionProfileInput!
}

"""The output parameter for the `postPositionProfileForOpening` mutation."""
union PostPositionProfileForOpeningPayload = PostPositionProfileForOpeningPayload_Success | PostPositionProfileForOpeningPayload_Conflict

"""
The conflict result for the `postPositionProfileForOpening` mutation.

The  `idempotencyId` provided as part of `CreatePostingInstructionInput` while creating a position profile must be unique.
Providing the same `idempotencyId` will result in a conflict.
"""
type PostPositionProfileForOpeningPayload_Conflict {
  """Attributes of the conflicting position profile."""
  conflictingPositionProfile: PostPositionProfileForOpening_PositionProfilePayload!
}

"""The success result for the `postPositionProfileForOpening` mutation."""
type PostPositionProfileForOpeningPayload_Success {
  """Attributes of the newly created position profile."""
  positionProfile: PostPositionProfileForOpening_PositionProfilePayload!
}

"""
A profile for posting a job ad against an existing position opening.

This contains information of how a position opening is presented on a given channel or job board.
"""
input PostPositionProfileForOpeningPositionProfileInput {
  """The identifier for the `PositionOpening` that this position profile belongs to."""
  positionOpeningId: String!
  """
  A short phrase describing the position as it would be listed on a business card or in a company directory.
  
  This field has a maximum length of 80 bytes in UTF-8 encoding.
  """
  positionTitle: String!
  """
  An array of identifiers for the `HiringOrganization`s that have the position.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionOrganizations: [String!]!
  """
  An optional hirer-provided opaque job reference.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  This appears on the invoice when SEEK bills the hirer for the job ad.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekBillingReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  For the `seekAnz` scheme, this field is not supported and should be set to `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  A SEEK ANZ work type code.
  
  For positions in `seekAnz` scheme, this field is used instead of `positionScheduleTypeCodes`.
  
  Currently, four codes are defined:
  
  - `Casual` indicates a casual position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme.
  - Set to `null` for other schemes.
  """
  seekAnzWorkTypeCode: String
  """
  An array of `JobCategory` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionLocation: [String!]!
  """
  The identifier for the `ApplicationQuestionnaire` containing the set of questions to present to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaireId: String
  """The video to render within the advertisement."""
  seekVideo: SeekVideoInput
  """
  The instructions related to posting the job ad.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  postingInstructions: [CreatePostingInstructionInput!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""Attributes of the position profile."""
type PostPositionProfileForOpening_PositionProfilePayload {
  """The identifier for the `PositionProfile`."""
  profileId: ObjectIdentifier!
}

"""Attributes of the position opening."""
type PostPosition_PositionOpeningPayload {
  """
  The identifier for the `PositionOpening`.
  
  Scheme restrictions:
  
  - The `seekAnz` scheme creates the position opening asynchronously.
    This identifier will initially reference an missing object;
    the object should be created within a few minutes.
  """
  documentId: ObjectIdentifier!
}

"""The details of the position profile to be created."""
input PostPosition_PositionProfileInput {
  """
  A short phrase describing the position as it would be listed on a business card or in a company directory.
  
  This field has a maximum length of 80 bytes in UTF-8 encoding.
  """
  positionTitle: String!
  """
  An array of identifiers for the `HiringOrganization`s that have the position.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionOrganizations: [String!]!
  """
  An optional hirer-provided opaque job reference.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  This appears on the invoice when SEEK bills the hirer for the job ad.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekBillingReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  For the `seekAnz` scheme, this field is not supported and should be set to `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  A SEEK ANZ work type code.
  
  For positions in `seekAnz` scheme, this field is used instead of `positionScheduleTypeCodes`.
  
  Currently, four codes are defined:
  
  - `Casual` indicates a casual position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme.
  - Set to `null` for other schemes.
  """
  seekAnzWorkTypeCode: String
  """
  An array of `JobCategory` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionLocation: [String!]!
  """
  The identifier for the `ApplicationQuestionnaire` containing the set of questions to present to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaireId: String
  """The video to render within the advertisement."""
  seekVideo: SeekVideoInput
  """
  The instructions related to posting the job ad.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  postingInstructions: [CreatePostingInstructionInput!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""Attributes of the position profile."""
type PostPosition_PositionProfilePayload {
  """
  The identifier for the `PositionProfile`.
  
  Scheme restrictions:
  
  - The `seekAnz` scheme creates the position profile asynchronously.
    This identifier will initially reference an missing object;
    the object should be created within a few minutes.
  """
  profileId: ObjectIdentifier!
}

"""
A profile of a position opening.

This contains information of how a position opening is presented on a job board.
"""
type PostedPositionProfile implements PositionProfile {
  """The identifier for the `PositionProfile`."""
  profileId: ObjectIdentifier!
  """The `PositionOpening` that this profile was created under."""
  positionOpening: PositionOpening!
  """The type of position profile, i.e. `PostedPositionProfile`."""
  seekTypeCode: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """The organization which has the position."""
  positionOrganizations: [HiringOrganization!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  This appears on the invoice when SEEK bills the hirer for the job ad.
  """
  seekBillingReference: String
  """
  The public web URL of the posted job ad.
  
  This will be the profile's object identifier for unposted position profiles.
  """
  positionUri: String!
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescription!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  If the offered schedule isn't known this will be `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackage!
  """
  A work type code for the `seekAnz` scheme.
  
  Currently, four codes are defined:
  
  - `Casual` indicates a casual position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  
  For positions in other schemes this will be `null`.
  """
  seekAnzWorkTypeCode: String
  """The occupational categories of the job."""
  jobCategories: [JobCategory!]!
  """The locations of the position."""
  positionLocation: [Location!]!
  """
  The set of questions presented to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaire: ApplicationQuestionnaire
  """The video to render within the advertisement."""
  seekVideo: SeekVideo
  """The instructions related to posting the job ad."""
  postingInstructions: [PostingInstruction!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""A collection of information about where and how to post a job ad."""
type PostingInstruction {
  """The start date of the posting."""
  start: DateTime!
  """The end date of the posting."""
  end: DateTime!
  """
  A SEEK ANZ advertisement type code.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic advertisement.
  - `StandOut` indicates a StandOut advertisement.
  - `Premium` indicates a Premium advertisement.
  
  For positions in other schemes this will be `null`.
  """
  seekAnzAdvertisementType: String
  """
  An array of methods for applying to the position.
  
  If no methods are provided, SEEK's native apply form will be used to receive candidate applications.
  Native applications will raise a `CandidateApplicationCreated` event that points to a `CandidateProfile` object.
  """
  applicationMethods: [ApplicationMethod!]!
  """
  The identifier for the `AdvertisementBranding` applied to the posted job ad.
  
  This is included for HR-JSON compatibility;
  GraphQL users should use the `branding` nested object instead.
  """
  brandingId: String
  """The branding applied to the posted job ad."""
  branding: AdvertisementBranding
}

"""The party that owns the position opening."""
type PostingRequester {
  """
  The identifier for the `HiringOrganization` that owns the position opening.
  
  This may be a hirer or agency.
  """
  id: ObjectIdentifier!
  """The name of the party that owns the position opening."""
  name: String!
  """
  The legacy SEEK ANZ advertiser ID.
  
  This is a numeric identifier used by legacy Job Posting & Application Export APIs in the `seekAnz` scheme.
  For hirers or agencies in other schemes this will be `null`.
  """
  seekAnzAdvertiserId: Int
  """
  The role of the owner of the position opening.
  
  Currently, two codes are defined:
  
  - `Agency` indicates a recruitment agency hiring on behalf of another company.
  - `Company` indicates a company hiring on behalf of themselves.
  """
  roleCode: String!
  """Specific contact people for the position opening at the party."""
  personContacts: [SpecifiedPerson!]!
}

"""The party that owns the position opening."""
input PostingRequesterInput {
  """The identifier for the `HiringOrganization` that owns the position opening."""
  id: String!
  """
  The role of the owner of the position opening.
  
  Currently, one code is defined:
  
  - `Company` indicates a company hiring on behalf of themselves.
  """
  roleCode: String!
  """
  Specific contact people for the position opening at the party.
  
  The name and email address of at least one contact person must be provided.
  A maximum of 10 contact people may be provided.
  """
  personContacts: [SpecifiedPersonInput!]!
}

"""A candidate's preferences in the location of a position."""
type PreferredLocation {
  """The address that represents the preferred location."""
  referenceLocation: Address
}

"""A candidate's preferences in the location of a position."""
input PreferredLocationInput {
  """The address that represents the preferred location."""
  referenceLocation: AddressInput
}

"""
The schema's entry-point for queries.

This acts as the public, top-level API from which all queries must start.
"""
type Query {
  """The API version."""
  version: String!
  """
  A location node with the given location `id`.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  location(
    """The identifier for the `Location`."""
    id: String!
  ): Location
  """
  An array of location nodes relevant to the text provided.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  locationSuggestions(
    """
    The context that the location suggestions will be used for.
    
    The only supported value is `PositionPosting` which returns locations for the purposes of posting a position profile.
    Additional values will be added in the future.
    """
    usageTypeCode: String!
    """
    The scheme for the location dataset to query.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """
    The identifier for the `HiringOrganization` used to provide tailored location suggestions.
    
    This field is ignored when its scheme doesn't match `schemeId`.
    """
    hirerId: String
    """The input used for the location suggestions."""
    text: String!
    """
    A non-negative limit to the number of locations to return.
    
    Defaults to 20.
    """
    first: Int
  ): [LocationSuggestion!]
  """
  An array of locations relevant to the provided geolocation ordered by distance.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  nearestLocations(
    """
    The scheme for the location dataset to query.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """The geolocation coordinates input used for the location suggestions."""
    geoLocation: GeoLocationInput!
    """
    A non-negative limit to the number of locations to return.
    
    Defaults to the maximum value of 10.
    """
    first: Int
  ): [Location!]
  """
  An application questionnaire with the given `id`.
  
  Questionnaires can be associated with a `PositionProfile`.
  
  This query accepts browser tokens that include the `query:application-questionnaires` scope.
  """
  applicationQuestionnaire(
    """The identifier for the `ApplicationQuestionnaire`."""
    id: String!
  ): ApplicationQuestionnaire
  """Ad products available when creating an advertisement."""
  seekAnzHirerAdvertisementCreationProducts(
    """The identifier for the `HiringOrganization`."""
    hirerId: String!
    """The advertisement with possible field changes."""
    draftAdvertisement: SeekAnzAdProductAdvertisementDraftInput!
  ): [SeekAnzAdProduct!]
  """Ad products available when updating an advertisement."""
  seekAnzHirerAdvertisementModificationProducts(
    """The identifier for the `HiringOrganization`."""
    hirerId: String!
    """The identifier for the `PositionProfile`."""
    advertisementId: String!
    """The advertisement with possible field changes."""
    draftAdvertisement: SeekAnzAdProductAdvertisementDraftInput!
  ): [SeekAnzAdProduct!]
  """
  Ad products available when updating an advertisement.
  
  Use this query while you don't have an identifier for the live `PositionProfile`.
  """
  seekAnzHirerAdvertisementModificationProductsAlt(
    """The identifier for the `HiringOrganization`."""
    hirerId: String!
    """The advertisement before any field changes."""
    advertisement: SeekAnzAdProductAdvertisementInput!
    """The advertisement with possible field changes."""
    draftAdvertisement: SeekAnzAdProductAdvertisementDraftInput!
  ): [SeekAnzAdProduct!]
  """
  The hiring organization for the given `id`.
  
  This query accepts browser tokens that include the `query:organizations` scope.
  """
  hiringOrganization(
    """The identifier for the `HiringOrganization`."""
    id: String!
  ): HiringOrganization
  """
  A page of hirers that have an active relationship with the requesting partner.
  
  This will not return agencies; it's not possible to have a relationship with an agency.
  
  A maximum of 100 hirers can be returned in a single page.
  Additional hirers can be queried using a pagination cursor.
  
  The result list is ordered alphabetically by the hirer's name.
  
  This query accepts browser tokens that include the `query:organizations` scope.
  It will only return the single hirer that the browser token is scoped to.
  """
  hiringOrganizations(
    """
    The scheme of the hirers.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """
    An opaque cursor to the earlier bounding hirer.
    
    Resulting hirers will be alphabetically later than this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding hirers.
    
    Resulting hirers will be alphabetically earlier than this cursor.
    """
    before: String
    """
    The upper limit of hirers to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess hirers will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of hirers to return from the end of the list.
    
    Excess hirers will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `HiringOrganization`-specific criteria to filter by."""
    filter: HiringOrganizationsFilterInput
  ): HiringOrganizationsConnection!
  """
  A hiring organization corresponding to the given SEEK ANZ advertiser ID.
  
  This query accepts browser tokens that include the `query:organizations` scope.
  """
  seekAnzAdvertiser(
    """
    The legacy SEEK ANZ advertiser ID.
    
    This is a numeric identifier used by legacy Job Posting & Application Export APIs in the `seekAnz` scheme.
    """
    id: Int!
  ): HiringOrganization
  """
  The job category for the given `id`.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  jobCategory(
    """The identifier for the `JobCategory`."""
    id: String!
  ): JobCategory
  """
  A list of top-level job categories for the provided scheme.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  jobCategories(
    """
    The scheme of the job categories.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
  ): [JobCategory!]!
  """
  An array of suggested job categories for the provided partial `PositionProfile`.
  
  This query accepts browser tokens that include the `query:ontologies` scope.
  """
  jobCategorySuggestions(
    """
    The partial position profile to suggest a job category for.
    
    This should include the same field values that will eventually be used to create or post the `PositionProfile`.
    """
    positionProfile: JobCategorySuggestionPositionProfileInput!
    """
    The scheme of the suggested job categories.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """
    A non-negative limit to the number of job categories to return.
    
    Defaults to 10.
    """
    first: Int
  ): [JobCategorySuggestionChoice!]!
  """A page of advertisement brandings associated with the specified `hirerId`."""
  advertisementBrandings(
    """
    An opaque cursor to the earlier bounding advertisement brandings.
    
    Resulting advertisement brandings will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding advertisement brandings.
    
    Resulting advertisement brandings will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of advertisement brandings to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess advertisement brandings will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of advertisement brandings to return from the end of the list.
    
    Excess advertisement brandings will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The identifier for the `HiringOrganization`."""
    hirerId: String!
  ): AdvertisementBrandingsConnection!
  """The advertisement branding for the given `id`."""
  advertisementBranding(
    """The identifier for the `AdvertisementBranding`."""
    id: String!
  ): AdvertisementBranding
  """A position opening with the given `id`."""
  positionOpening(
    """
    The identifier for the `PositionOpening`.
    
    This is the `documentId` of the returned `PositionOpening` object.
    """
    id: String!
  ): PositionOpening
  """A position profile with the given `id`."""
  positionProfile(
    """
    The identifier for the `PositionProfile`.
    
    This is the `profileId` of the returned `PositionProfile` object.
    """
    id: String!
  ): PositionProfile
  """
  A page of position openings for the given `hirerId`.
  
  Currently, only position openings in the `global` and `globalPublicTest` schemes are returned.
  
  A maximum of 20 position openings can be returned in a single page.
  Additional position openings can be queried using a pagination cursor.
  """
  positionOpenings(
    """The identifier for the `HiringOrganization` to retrieve position openings for."""
    hirerId: String!
    """
    An opaque cursor to the earlier bounding page.
    
    Resulting position openings will _succeed_ this cursor.
    """
    after: String
    """
    The upper limit of position openings to return from the start of the list.
    
    Defaults to 10 if `first` is not specified.
    Excess position openings will be trimmed from the end of the list.
    """
    first: Int
    """The additional `PositionOpening`-specific criteria to filter by."""
    filter: PositionOpeningsFilterInput
  ): PositionOpeningConnection!
  """The `CandidateProfile` for the given `id`."""
  candidateProfile(
    """
    The identifier for the `CandidateProfile`.
    
    This is the `profileId` of the returned `CandidateProfile` object.
    """
    id: String!
  ): CandidateProfile
  """
  The candidate for the given `id`.
  
  This will include the candidate's personal details along with all application profiles for a single hirer.
  """
  candidate(
    """
    The identifier for the `Candidate`.
    
    This is the `documentId` of the returned `Candidate` object.
    """
    id: String!
  ): Candidate
  """The `CandidateProcessHistoryItem` for the given `id`."""
  candidateProcessHistoryItem(
    """The identifier for the `CandidateProcessHistoryItem`."""
    id: String!
  ): CandidateProcessHistoryItem
  """The event for the given `id`."""
  event(
    """The identifier for the `Event`."""
    id: String!
  ): Event
  """
  A page of events matching the specified criteria.
  
  A maximum of 100 events can be returned in a single page.
  Additional events can be queried using a pagination cursor.
  
  The result list is returned in ascending stream date & time order.
  It starts from the earliest known event if no pagination arguments are provided.
  """
  events(
    """
    An opaque cursor to the earlier bounding event.
    
    Resulting events will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding event.
    
    Resulting events will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of events to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess events will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of events to return from the end of the list.
    
    Excess events will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `Event`-specific criteria to filter by."""
    filter: EventsFilterInput
    """
    The data source for the event.
    
    This commonly refers to a SEEK brand.
    See the relevant `Event` implementation for a list of supported schemes.
    """
    schemeId: String!
  ): EventsConnection!
  """
  A page of webhook attempts matching the specified criteria generated by a selected event.
  
  A maximum of 100 webhook attempts can be returned in a single page.
  Additional webhook attempts can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known attempt if no pagination arguments are provided.
  """
  webhookAttemptsForEvent(
    """
    An opaque cursor to the earlier bounding webhook attempt.
    
    Resulting webhook attempts will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook attempt.
    
    Resulting webhook attempts will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook attempts to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook attempts will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook attempts to return from the end of the list.
    
    Excess webhook attempts will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookAttempt`-specific criteria to filter by."""
    filter: WebhookAttemptsFilterInput
    """The identifier for the `Event` that generated the attempts."""
    eventId: String!
  ): WebhookAttemptsConnection!
  """The webhook subscription for the given `id`."""
  webhookSubscription(
    """The identifier for the `WebhookSubscription`."""
    id: String!
  ): WebhookSubscription
  """
  A page of webhook subscriptions matching the specified criteria.
  
  A maximum of 100 webhook subscriptions can be returned in a single page.
  Additional webhook subscriptions can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known subscription if no pagination arguments are provided.
  """
  webhookSubscriptions(
    """
    An opaque cursor to the earlier bounding webhook subscription.
    
    Resulting webhook subscriptions will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook subscription.
    
    Resulting webhook subscriptions will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook subscriptions to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook subscriptions will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook subscriptions to return from the end of the list.
    
    Excess webhook subscriptions will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookSubscription`-specific criteria to filter by."""
    filter: WebhookSubscriptionsFilterInput
    """
    The data source for the webhook subscription's events.
    
    This commonly refers to a SEEK brand.
    See the relevant `Event` implementation for a list of supported schemes.
    """
    schemeId: String!
  ): WebhookSubscriptionsConnection!
  """The webhook subscription replay for the given `id`."""
  webhookSubscriptionReplay(
    """The identifier for the `WebhookSubscriptionReplay`."""
    id: String!
  ): WebhookSubscriptionReplay
  """
  A page of webhook requests matching the specified criteria generated by a selected subscription.
  
  A maximum of 100 webhook requests can be returned in a single page.
  Additional webhook requests can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known request if no pagination arguments are provided.
  """
  webhookRequestsForSubscription(
    """
    An opaque cursor to the earlier bounding webhook request.
    
    Resulting webhook requests will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook request.
    
    Resulting webhook requests will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook requests to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook requests will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook requests to return from the end of the list.
    
    Excess webhook requests will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookRequest`-specific criteria to filter by."""
    filter: WebhookRequestFilterInput
    """The identifier for the `WebhookSubscription` that generated the requests."""
    subscriptionId: String!
  ): WebhookRequestsConnection!
  """The webhook request for the given `requestId`."""
  webhookRequest(
    """
    The scheme ID of the `WebhookSubscription` that generated the request.
    
    This is used to determine which data source includes the `requestId`.
    
    Currently, only `seekAnz` and `seekAnzPublicTest` are supported.
    """
    schemeId: String!
    """
    The request ID.
    
    This is included in the HTTP request as an `X-Request-Id` custom header.
    """
    requestId: String!
  ): WebhookRequest
}

"""A monetary amount of remuneration in a specified currency."""
type RemunerationAmount {
  """
  A non-negative float in the major currency unit for the ISO currency code.
  
  For example, this is the number of dollars in dollar-denominated currencies.
  """
  value: Float!
  """The three-letter ISO 4217 currency code, in uppercase."""
  currency: String!
}

"""A monetary amount of remuneration in a specified currency."""
input RemunerationAmountInput {
  """
  A non-negative float in the major currency unit for the ISO currency code.
  
  For example, this is the number of dollars in dollar-denominated currencies.
  """
  value: Float!
  """
  The three-letter ISO 4217 currency code, in uppercase.
  
  For the `seekAnz` scheme, a single currency is accepted in each location:
  
  - `NZD` is used by locations in New Zealand.
    These are `Location`s that have a `countryCode` of `NZ`.
  
  - `GBP` is used by locations in the UK & Ireland.
    These are `Location`s that have a `countryCode` of `GB` or `IE`.
  
  - `AUD` is used by all other locations
  """
  currency: String!
}

"""The salary or compensation for a position."""
type RemunerationPackage {
  """
  A code classifying the primary method of payment for a position.
  
  Currently, four codes are defined:
  
  - `CommissionOnly` employment is paid exclusively a results-based commission.
  - `Hourly` employment is paid for the number of hours worked.
  - `Salaried` employment is paid on an annual basis.
  - `SalariedPlusCommission` employment is paid on an annual basis plus a results-based commission.
  """
  basisCode: String!
  """
  An array of offered salary ranges.
  
  The `seekAnz` scheme will always have a single element containing the amount for the `basisCode`.
  """
  ranges: [RemunerationRange!]!
  """
  Human readable descriptions of the remuneration package.
  
  The `seekAnz` scheme will be limited to a single element.
  
  An empty array signifies that no salary descriptions exist for the remuneration package.
  """
  descriptions: [String!]!
}

"""The salary or compensation for a position."""
input RemunerationPackageInput {
  """
  A code classifying the primary method of payment for a position.
  
  Currently, four codes are defined:
  
  - `CommissionOnly` employment is paid exclusively a results-based commission.
  - `Hourly` employment is paid for the number of hours worked.
  - `Salaried` employment is paid on an annual basis.
  - `SalariedPlusCommission` employment is paid on an annual basis plus a results-based commission.
  """
  basisCode: String!
  """
  An array of offered salary ranges.
  
  Scheme requirements:
  
  - The `global` scheme has a maximum of 10 elements for `UnpostedPositionProfile`s.
  - The `seekAnz` scheme is limited to a single element containing the amount for the `basisCode`.
  """
  ranges: [RemunerationRangeInput!]!
  """
  Human readable descriptions of the remuneration package.
  
  Scheme requirements:
  
  - The `global` scheme has a maximum of 10 elements for `UnpostedPositionProfile`s.
  - The `seekAnz` scheme is limited to a single element.
  
  An empty array must be provided to signify the absence of salary descriptions.
  """
  descriptions: [String!]!
}

"""A salary or compensation range for a position."""
type RemunerationRange {
  """The minimum amount an organization is willing to pay for a position."""
  minimumAmount: RemunerationAmount!
  """
  The maximum amount an organization is willing to pay for a position.
  
  A 'null' value indicates the organization has not specified an upper bound for the range.
  """
  maximumAmount: RemunerationAmount
  """
  The interval the remuneration amounts are calculated over.
  
  Currently two interval codes are defined:
  
  - `Hour` is used to express hourly rates.
  - `Year` is used to express annual salaries or commissions.
  """
  intervalCode: String!
}

"""A salary or compensation range for a position."""
input RemunerationRangeInput {
  """The minimum amount an organization is willing to pay for a position."""
  minimumAmount: RemunerationAmountInput!
  """
  The maximum amount an organization is willing to pay for a position.
  
  A `null` value indicates the organization has not specified an upper bound for the range.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme when `postingInstructions` are provided.
  """
  maximumAmount: RemunerationAmountInput
  """
  The interval the remuneration amounts are calculated over.
  
  Currently two interval codes are defined:
  
  - `Hour` is used to express hourly rates.
  - `Year` is used to express annual salaries or commissions.
  
  The specified value must correspond to the specified `RemunerationPackageInput`.`basisCode`.
  When `RemunerationPackageInput`.`basisCode` equals `Hourly`, the `RemunerationRangeInput`.`intervalCode` must be `Hour`.
  For all other `RemunerationPackageInput`.`basisCode`s, the `RemunerationRangeInput`.`intervalCode` must be `Year`.
  """
  intervalCode: String!
}

"""The input parameter for the `replayWebhookSubscription` mutation."""
input ReplayWebhookSubscriptionInput {
  """The details of the webhook subscription to be replayed."""
  webhookSubscription: ReplayWebhookSubscription_SubscriptionInput!
  """The additional fields to filter which events are to be replayed."""
  filter: ReplayWebhookSubscription_FilterInput
}

"""The output parameter for the `replayWebhookSubscription` mutation."""
type ReplayWebhookSubscriptionPayload {
  """The details of the webhook subscription to have its messages redelivered."""
  webhookSubscription: WebhookSubscription!
}

"""The criteria used to decide which events will be replayed."""
input ReplayWebhookSubscription_FilterInput {
  """
  Whether to include all events, or only events that have failed to be delivered.
  
  Defaults to false if no value is provided.
  """
  replayDeliveredEventsIndicator: Boolean
  """
  The earliest event to replay.
  
  Defaults to the first event if no value is provided.
  """
  createdAfterDateTime: DateTime
  """
  The latest event to replay.
  
  Defaults to the last event if no value is provided.
  """
  createdBeforeDateTime: DateTime
}

"""The details of the webhook subscription to be replayed."""
input ReplayWebhookSubscription_SubscriptionInput {
  """The identifier for the `WebhookSubscription`."""
  id: String!
}

"""The details of an available ad product."""
type SeekAnzAdProduct {
  """
  The type of the ad product.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic ad.
  - `StandOut` indicates a StandOut ad.
  - `Premium` indicates a Premium ad.
  """
  advertisementTypeCode: String!
  """The ad product name."""
  name: String!
  """The description of the ad product."""
  description: String!
  """The price component of the ad product."""
  price: SeekAnzAdProductPrice!
  """Whether the ad product is enabled."""
  enabledIndicator: Boolean!
  """How the ad product would be paid."""
  checkoutEstimate: SeekAnzAdProductCheckoutEstimate!
  """Messages that may be shown to hirer."""
  messages: [SeekAnzAdProductMessage!]!
  """Features this product supports."""
  features: SeekAnzAdProductFeatures!
}

"""
The input parameter for a draft advertisement.

This input is used in querying of both creation and modification of ad products.
"""
input SeekAnzAdProductAdvertisementDraftInput {
  """
  The type of ad product.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic ad.
  - `StandOut` indicates a StandOut ad.
  - `Premium` indicates a Premium ad.
  """
  typeCode: String
  """The hirer's job reference."""
  hirerJobReference: String
  """The position title."""
  positionTitle: String
  """The identifier for the `JobCategory`."""
  jobCategoryId: String
  """The identifier for the position's `Location`."""
  positionLocationId: String
}

"""The input parameter for the `seekAnzHirerAdvertisementModificationProductsAlt` query."""
input SeekAnzAdProductAdvertisementInput {
  """
  The type of ad product.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic ad.
  - `StandOut` indicates a StandOut ad.
  - `Premium` indicates a Premium ad.
  """
  typeCode: String!
  """The identifier for the `PositionProfile`."""
  id: String
  """The hirer's job reference."""
  hirerJobReference: String
  """The position title."""
  positionTitle: String!
  """The identifier for the `JobCategory`."""
  jobCategoryId: String!
  """The identifier for the position's `Location`."""
  positionLocationId: String!
}

"""The details of the outstanding payment."""
type SeekAnzAdProductCheckoutEstimate {
  """The amount left to be paid."""
  paymentDueExcludingTax: CurrencyMinorUnit
  """Checkout estimate summary."""
  summary: String!
  """Contract component of the checkout estimate."""
  contractConsumption: SeekAnzAdProductContractConsumption
}

"""The details of changes to the hirer's contract consumption."""
type SeekAnzAdProductContractConsumption {
  """Summary of contract consumption."""
  summary: String!
  """
  Type of contract consumption.
  
  Currently, three codes are defined:
  
  - `SameAdType` indicates payment due will be consumed from a contract of the same ad type as this product.
  - `OtherAdType` indicates payment due will be consumed from a contract of a different ad type to this product.
  - `SameAdTypePlusInvoice` indicates payment due will be consumed from a contract of the same ad type as this product and an invoice will be generated.
  """
  typeCode: String!
}

"""The indicators of supported ad product features."""
type SeekAnzAdProductFeatures {
  """
  Whether the product supports branding.
  
  When false, the `PostingInstruction`'s `brandingId` field will be ignored.
  """
  brandingIndicator: Boolean!
  """
  Whether the product supports bullet points in the search results.
  
  When false, `SearchBulletPoint` `PositionFormattedDescription`s will be silently discarded.
  """
  searchBulletPointsIndicator: Boolean!
}

"""A message shown to the hirer for the current ad product."""
type SeekAnzAdProductMessage {
  """
  The type of message.
  
  Currently, four codes are defined:
  - `PricingError` indicates a message relating to a pricing error.
  - `PremiumPerformanceChange` indicates a message relating to an impact on premium ad performance.
  - `UpdatePricingIncrease` indicates a message relating to a price increase in update mode for SEEK contracts.
  - `ProductUnavailable` indicates a message relating to an unavailable product.
  """
  typeCode: String!
  """
  The severity of the message.
  
  Currently, two codes are defined:
  
  - `Informational` indicates a message with helpful information for a hirer.
  - `Critical` indicates a message with critical information for a hirer.
  """
  severityCode: String!
  """
  The visibility of the message.
  
  Currently, three codes are defined:
  - `ProductSelected` indicates the message should be visible when the product is selected.
  - `ProductNotSelected` indicates the message should be visible when the product is not selected.
  - `Always` indicates the message should be always visible.
  """
  visibilityCode: String!
  """The content of the message."""
  content: String!
}

"""The price for an ad product."""
type SeekAnzAdProductPrice {
  """The product price without tax."""
  amountExcludingTax: CurrencyMinorUnit
  """Descriptive summary of the product price."""
  summary: String!
  """Whether the price can be shown to the hirer."""
  visibleForHirerIndicator: Boolean!
  """Whether taxes will be added when purchased."""
  taxedIndicator: Boolean!
}

"""The role of an attachment within a profile."""
enum SeekAttachmentRole {
  """A resume or CV."""
  RESUME
  """A cover letter specific to a position opening."""
  COVER_LETTER
  """A document supporting a position-specific selection criteria."""
  SELECTION_CRITERIA
}

"""The source system for the process history item."""
type SeekProcessHistoryItemSource {
  """Free text description of the source."""
  name: String!
}

"""The source system for the process history item."""
input SeekProcessHistoryItemSourceInput {
  """Free text description of the source."""
  name: String!
}

"""A collection of information about the video to display alongside advertisement details."""
type SeekVideo {
  """The URL of the video."""
  url: String!
  """
  The position relative to the advertisement details where the video is rendered.
  
  Currently, two codes are defined:
  
  - `Above` indicates the video will render above the advertisement details.
  - `Below` indicates the video will render below the advertisement details.
  """
  seekAnzPositionCode: String
}

"""A collection of information about the video to display alongside advertisement details."""
input SeekVideoInput {
  """
  The URL of the video to display.
  
  Scheme requirements:
  
   - The `seekAnz` scheme requires URLs to be YouTube embed URLs, e.g. `https://www.youtube.com/embed/aAgePQvHBQM`.
  """
  url: String!
  """
  The position relative to the advertisement details where the video should be rendered.
  
  Currently, two codes are defined:
  
  - `Above` indicates the video will render above the advertisement details.
  - `Below` indicates the video will render below the advertisement details.
  """
  seekAnzPositionCode: String
}

"""A reference to a person associated with an object."""
type SpecifiedPerson {
  """The person's name."""
  name: PersonName!
  """Methods of communication with the person."""
  communication: Communication!
  """
  The role of the person.
  
  Currently, two codes are defined:
  
  - `Recruiter` indicates a person recruiting for the position.
  - `HiringManager` indicates an employee that requested the position to be filled.
  """
  roleCode: String
}

"""A reference to a person associated with an object."""
input SpecifiedPersonInput {
  """The person's name."""
  name: PersonNameInput!
  """Methods of communication with the person."""
  communication: CommunicationInput!
  """
  The role of the person.
  
  Currently, two codes are defined:
  
  - `Recruiter` indicates a person recruiting for the position.
  - `HiringManager` indicates an employee that requested the position to be filled.
  """
  roleCode: String
}

"""
A profile of a position opening.

This contains information of how a position opening is presented as an internal requisition.
"""
type UnpostedPositionProfile implements PositionProfile {
  """The identifier for the `PositionProfile`."""
  profileId: ObjectIdentifier!
  """
  A human-readable name given to the profile.
  
  This in addition to the `positionTitle` can help identify the profile to an end user.
  """
  profileName: String
  """The `PositionOpening` that this profile was created under."""
  positionOpening: PositionOpening!
  """The type of position profile, i.e. `UnpostedPositionProfile`."""
  seekTypeCode: String!
  """A short phrase describing the position as it would be listed on a business card or in a company directory."""
  positionTitle: String!
  """The organization which has the position."""
  positionOrganizations: [HiringOrganization!]!
  """An optional hirer-provided opaque job reference."""
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  SEEK does not use this field on unposted position profiles.
  """
  seekBillingReference: String
  """
  The public web URL of the posted job ad.
  
  This will be the profile's object identifier for unposted position profiles.
  """
  positionUri: String!
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescription!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  If the offered schedule isn't known this will be `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackage!
  """
  A work type code for the `seekAnz` scheme.
  
  Currently, four codes are defined:
  
  - `Casual` indicates a casual position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  
  For positions in other schemes this will be `null`.
  """
  seekAnzWorkTypeCode: String
  """The occupational categories of the job."""
  jobCategories: [JobCategory!]!
  """The locations of the position."""
  positionLocation: [Location!]!
  """
  The set of questions presented to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  """
  seekApplicationQuestionnaire: ApplicationQuestionnaire
  """The video to render within the advertisement."""
  seekVideo: SeekVideo
  """The instructions related to posting the job ad."""
  postingInstructions: [PostingInstruction!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""The input parameter for the `updateCandidateProcessHistoryItem` mutation."""
input UpdateCandidateProcessHistoryItemInput {
  """The details of the  `CandidateProcessHistoryItem` to be updated."""
  candidateProcessHistoryItem: UpdateCandidateProcessHistoryItem_CandidateProcessHistoryItemInput!
}

"""The output parameter for the `updateCandidateProcessHistoryItem` mutation."""
type UpdateCandidateProcessHistoryItemPayload {
  """The details of the `CandidateProcessHistoryItem` that was updated."""
  candidateProcessHistoryItem: CandidateProcessHistoryItem!
}

"""The details of the `CandidateProcessHistoryItem` to be updated."""
input UpdateCandidateProcessHistoryItem_CandidateProcessHistoryItemInput {
  """The identifier for the `CandidateProcessHistoryItem` to be updated."""
  id: String!
  """The date & time the action was executed."""
  actionDate: DateTime!
  """
  The executed action that constitutes this history item.
  
  This action may or may not trigger a change in the status of the underlying process.
  For example, an action may be to add a note against a candidate's profile,
  which has no material effect on the stage through the application process.
  """
  action: CandidateProcessActionInput!
  """
  The current status of the underlying process.
  
  For example, a candidate in an application process may progress through a series of statuses like applied, interviewed, offered, hired.
  """
  status: CandidateProcessStatusInput
  """
  The position profile that the history item relates to.
  
  This is null for interactions that are not specific to an individual position,
  such as a general interview with a recruiter.
  """
  positionProfile: CandidateProcessHistoryItem_PositionProfileInput
  """
  The underlying source for the item.
  
  For example, items related to an application process would note the job board or other channel that sourced the application.
  
  This is required if `positionProfile` is specified.
  """
  seekSource: SeekProcessHistoryItemSourceInput
  """The parties that executed the action."""
  primaryParties: [CandidateProcessPartyInput!]!
}

"""The input parameter for the `updatePositionOpeningPersonContacts` mutation."""
input UpdatePositionOpeningPersonContactsInput {
  """The details of the position opening to be updated."""
  positionOpening: UpdatePositionOpeningPersonContactsPositionOpeningInput!
}

"""The output parameter for the `updatePositionOpeningPersonContacts` mutation."""
type UpdatePositionOpeningPersonContactsPayload {
  """The details of the updated position opening."""
  positionOpening: PositionOpening!
}

"""The details of the position opening to be updated."""
input UpdatePositionOpeningPersonContactsPositionOpeningInput {
  """The identifier for the `PositionOpening` to be updated."""
  documentId: String!
  """
  Specific contact people for the position opening at the party.
  
  The name and email address of at least one contact person must be provided.
  A maximum of 10 contact people may be provided.
  """
  personContacts: [SpecifiedPersonInput!]!
}

"""The input parameter for the `updatePositionOpeningStatus` mutation."""
input UpdatePositionOpeningStatusInput {
  """The details of the position opening to be updated."""
  positionOpening: UpdatePositionOpeningStatusPositionOpeningInput!
}

"""The output parameter for the `updatePositionOpeningStatus` mutation."""
type UpdatePositionOpeningStatusPayload {
  """The details of the updated position opening."""
  positionOpening: PositionOpening!
}

"""The details of the position opening to have its status updated."""
input UpdatePositionOpeningStatusPositionOpeningInput {
  """The identifier for the `PositionOpening` to be updated."""
  documentId: String!
  """
  The status of the position opening.
  
  Currently, three codes are defined:
  
  - `Incomplete` indicates the position opening is in a draft state.
  - `Active` indicates the position opening is open.
  - `Closed` indicates the position opening has been closed.
  """
  statusCode: String!
}

"""The input parameter for the `updatePostedPositionProfile` mutation."""
input UpdatePostedPositionProfileInput {
  """The values to replace on a posted position profile."""
  positionProfile: UpdatePostedPositionProfile_PositionProfileInput!
}

"""The output of the `updatePostedPositionProfile` mutation."""
type UpdatePostedPositionProfilePayload {
  """Attributes of the updated position profile."""
  positionProfile: UpdatePostedPositionProfile_PositionProfilePayload!
}

"""The values to replace on a posted position profile."""
input UpdatePostedPositionProfile_PositionProfileInput {
  """The identifier for the posted `PositionProfile` to update."""
  profileId: String!
  """
  A short phrase describing the position as it would be listed on a business card or in a company directory.
  
  This field has a maximum length of 80 bytes in UTF-8 encoding.
  """
  positionTitle: String!
  """
  An array of identifiers for the `HiringOrganization`s that have the position.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionOrganizations: [String!]!
  """
  An optional hirer-provided opaque job reference.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  This appears on the invoice when SEEK bills the hirer for the job ad.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekBillingReference: String
  """An array of formatted position profile descriptions."""
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  
  For the `seekAnz` scheme, this field is not supported and should be set to `null`.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  A SEEK ANZ work type code.
  
  For positions in `seekAnz` scheme, this field is used instead of `positionScheduleTypeCodes`.
  
  Currently, four codes are defined:
  
  - `Casual` indicates a casual position.
  - `ContractTemp` indicates a fixed-length contract position.
  - `FullTime` indicates a full-time position.
  - `PartTime` indicates a part-time position.
  
  Scheme requirements:
  
  - Required for the `seekAnz` scheme when `postingInstructions` are provided.
  - Set to `null` for other schemes.
  """
  seekAnzWorkTypeCode: String
  """
  An array of `JobCategory` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  positionLocation: [String!]!
  """
  The identifier for the `ApplicationQuestionnaire` containing the set of questions to present to candidates during an application.
  
  The questionnaire responses will be available as `seekQuestionnaireSubmission` on the application's `CandidateProfile`.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is ignored.
  """
  seekApplicationQuestionnaireId: String
  """The video to render within the advertisement."""
  seekVideo: SeekVideoInput
  """
  The instructions related to posting the job ad.
  
  Scheme requirements:
  
  - The `seekAnz` scheme requires exactly one element.
  """
  postingInstructions: [UpdatePostingInstructionInput!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""Attributes of the updated position profile."""
type UpdatePostedPositionProfile_PositionProfilePayload {
  """The identifier for the updated `PositionProfile`."""
  profileId: ObjectIdentifier!
}

"""A collection of information about where and how to post a job ad."""
input UpdatePostingInstructionInput {
  """
  A SEEK ANZ advertisement type code.
  
  Currently, three codes are defined:
  
  - `Classic` indicates a Classic advertisement.
  - `StandOut` indicates a StandOut advertisement.
  - `Premium` indicates a Premium advertisement.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is required.
  - For other schemes, set this to `null`.
  """
  seekAnzAdvertisementType: String
  """The end date of the posting."""
  end: DateTime
  """
  An array of methods for applying to the position.
  
  If no methods are provided, SEEK's native apply form will be used to receive candidate applications.
  Native applications will raise a `CandidateApplicationCreated` event that points to a `CandidateProfile` object.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field is limited to a single element.
    Requests with more than 1 element will fail.
  """
  applicationMethods: [ApplicationMethodInput!]
  """
  The identifier for the `AdvertisementBranding` to apply to the posted job ad.
  
  Scheme requirements:
  
  - For the `seekAnz` scheme, this field's behavior is dependent on the `SeekAnzAdProductFeatures` of the product set in the `seekAnzAdvertisementType` field.
  
    When the product's `SeekAnzAdProductFeatures`.`brandingIndicator` value is false, this field will be silently ignored.
  """
  brandingId: String
}

"""The input parameter for the `updateUnpostedPositionProfile` mutation."""
input UpdateUnpostedPositionProfileInput {
  """An unposted profile of a position opening to update."""
  positionProfile: UpdateUnpostedPositionProfile_PositionProfileInput!
}

"""The output parameter for the `updateUnpostedPositionProfile` mutation."""
type UpdateUnpostedPositionProfilePayload {
  """Attributes of the updated unposted position profile."""
  positionProfile: UnpostedPositionProfile!
}

"""An unposted profile of a position opening to update."""
input UpdateUnpostedPositionProfile_PositionProfileInput {
  """The identifier for the unposted `PositionProfile` to update."""
  profileId: String!
  """
  A human-readable name given to the profile.
  
  This in addition to the `positionTitle` can help identify the profile to an end user.
  """
  profileName: String
  """
  A short phrase describing the position as it would be listed on a business card or in a company directory.
  
  This field has a maximum length of 80 bytes in UTF-8 encoding.
  """
  positionTitle: String!
  """
  An optional hirer-provided opaque job reference.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekHirerJobReference: String
  """
  An optional opaque billing reference.
  
  SEEK does not use this field on unposted position profiles.
  
  This field has a maximum length of 50 bytes in UTF-8 encoding.
  """
  seekBillingReference: String
  """
  An array of formatted position profile descriptions.
  
  A maximum of 10 formatted descriptions may be provided.
  """
  positionFormattedDescriptions: [PositionFormattedDescriptionInput!]!
  """
  An array of codes for the offered schedules for the position.
  
  Currently, two codes are defined:
  
  - `FullTime` indicates a full-time schedule.
  - `PartTime` indicates a part-time schedule.
  """
  positionScheduleTypeCodes: [String!]
  """The salary or compensation offered for the position."""
  offeredRemunerationPackage: RemunerationPackageInput!
  """
  An array of `JobCategory` identifiers.
  
  A maximum of 10 job categories may be provided.
  """
  jobCategories: [String!]!
  """
  An array of `Location` identifiers.
  
  A maximum of 10 locations may be provided.
  """
  positionLocation: [String!]!
  """
  An optional field for storing additional data with a `PositionProfile`.
  
  The metadata is not used by SEEK and won't be seen by hirers or candidates.
  
  This field has a maximum length of 1,000 bytes in UTF-8 encoding.
  """
  seekPartnerMetadata: String
}

"""The input parameter for the `updateUploadedCandidatePerson` mutation."""
input UpdateUploadedCandidatePersonInput {
  """The details of the uploaded candidate to be updated."""
  candidate: UpdateUploadedCandidatePerson_CandidateInput!
}

"""The output parameter for the `updateUploadedCandidatePerson` mutation."""
union UpdateUploadedCandidatePersonPayload = UpdateUploadedCandidatePersonPayload_Conflict | UpdateUploadedCandidatePersonPayload_Success

"""The conflict result for the `updateUploadedCandidatePerson` mutation."""
type UpdateUploadedCandidatePersonPayload_Conflict {
  """The details of the conflicting candidate."""
  conflictingCandidate: Candidate!
}

"""The success result for the `updateUploadedCandidatePerson` mutation."""
type UpdateUploadedCandidatePersonPayload_Success {
  """The details of the uploaded candidate that was updated."""
  candidate: Candidate!
}

"""The details of the uploaded candidate to be updated."""
input UpdateUploadedCandidatePerson_CandidateInput {
  """The identifier for the uploaded `Candidate` to be updated."""
  documentId: String!
  """
  The personal details of the uploaded candidate to be updated.
  
  At least one email address is required in `communication`,
  and one of the provided values must match `seekPrimaryEmailAddress`.
  
  If no value is provided for physical addresses in `communication` it will be treated as an empty list and will remove any previously uploaded addresses.
  """
  person: CandidatePersonInput!
  """
  The candidate's primary email address.
  
  The value must match one of the candidate's email addresses.
  """
  seekPrimaryEmailAddress: String!
}

"""The input parameter for the `updateUploadedCandidateProfileActions` mutation."""
input UpdateUploadedCandidateProfileActionsInput {
  """The details of the uploaded candidate profile to be updated."""
  candidateProfile: UpdateUploadedCandidateProfileActions_CandidateProfileInput!
}

"""The output parameter for the `updateUploadedCandidateProfileActions` mutation."""
type UpdateUploadedCandidateProfileActionsPayload {
  """
  The details of the uploaded candidate profile that was updated.
  
  The uploaded candidate is available in the `candidate` field.
  """
  candidateProfile: CandidateProfile!
}

"""The details of the uploaded candidate profile to be updated."""
input UpdateUploadedCandidateProfileActions_CandidateProfileInput {
  """The identifier for the uploaded `CandidateProfile` to be updated."""
  profileId: String!
  """
  Any associated actions that can be performed on the candidate profile.
  
  Only one of each type of action is permitted for the candidate profile.
  
  Currently, one type is defined for the `CandidateProcessActionInput` `code` field:
  
  - `ViewProfile` indicates that the URL is used to view the candidate's profile.
  """
  seekActions: [CandidateProcessActionInput!]!
}

"""The input parameter for the `updateUploadedCandidateProfileDates` mutation."""
input UpdateUploadedCandidateProfileDatesInput {
  """The details of the uploaded candidate profile to be updated."""
  candidateProfile: UpdateUploadedCandidateProfileDates_CandidateProfileInput!
}

"""The output parameter for the `updateUploadedCandidateProfileDates` mutation."""
type UpdateUploadedCandidateProfileDatesPayload {
  """
  The details of the uploaded candidate profile that was updated.
  
  The uploaded candidate is available in the `candidate` field.
  """
  candidateProfile: CandidateProfile!
}

"""The details of the uploaded candidate profile to be updated."""
input UpdateUploadedCandidateProfileDates_CandidateProfileInput {
  """The identifier for the uploaded `CandidateProfile` to be updated."""
  profileId: String!
  """
  When the candidate profile was first created in the partner system.
  
  Expects a RFC 3339 compliant date time.
  Millisecond precision is optional, and set to 0 if not provided.
  """
  createDateTime: DateTime!
  """
  When the candidate profile was last updated in the partner system.
  
  Expects a RFC 3339 compliant date time.
  Millisecond precision is optional, and set to 0 if not provided.
  """
  updateDateTime: DateTime!
}

"""The input parameter for the `updateUploadedCandidateProfilePositionPreferences` mutation."""
input UpdateUploadedCandidateProfilePositionPreferencesInput {
  """The details of the uploaded candidate profile to be updated."""
  candidateProfile: UpdateUploadedCandidateProfilePositionPreferences_CandidateProfileInput!
}

"""The output parameter for the `updateUploadedCandidateProfilePositionPreferences` mutation."""
type UpdateUploadedCandidateProfilePositionPreferencesPayload {
  """
  The details of the uploaded candidate profile that was updated.
  
  The uploaded candidate is available in the `candidate` field.
  """
  candidateProfile: CandidateProfile!
}

"""The details of the uploaded candidate profile to be updated."""
input UpdateUploadedCandidateProfilePositionPreferences_CandidateProfileInput {
  """The identifier for the uploaded `CandidateProfile` to be updated."""
  profileId: String!
  """
  The candidate's preferences in an ideal position.
  
  `ProactiveSourcing` candidates may have 0–1 position preferences.
  """
  positionPreferences: [PositionPreferenceInput!]!
}

"""The input parameter for the `updateWebhookSubscriptionDeliveryConfiguration` mutation."""
input UpdateWebhookSubscriptionDeliveryConfigurationInput {
  """The details of the webhook subscription to be updated."""
  webhookSubscription: UpdateWebhookSubscriptionDeliveryConfiguration_SubscriptionInput!
}

"""The output parameter for the `updateWebhookSubscriptionDeliveryConfiguration` mutation."""
type UpdateWebhookSubscriptionDeliveryConfigurationPayload {
  """The details of the updated webhook subscription."""
  webhookSubscription: WebhookSubscription!
}

"""The details of the webhook subscription delivery configuration to be updated."""
input UpdateWebhookSubscriptionDeliveryConfiguration_SubscriptionInput {
  """The identifier for the `WebhookSubscription`."""
  id: String!
  """The subscriber-owned URL where events will be sent to."""
  url: String!
  """
  The maximum number of events that will be sent in each HTTP request.
  
  This number must be between 1 and 10 inclusive. Defaults to 10.
  """
  maxEventsPerAttempt: Int
}

"""The input parameter for the `updateWebhookSubscriptionSigningConfiguration` mutation."""
input UpdateWebhookSubscriptionSigningConfigurationInput {
  """The details of the webhook subscription to be updated."""
  webhookSubscription: UpdateWebhookSubscriptionSigningConfiguration_SubscriptionInput!
}

"""The output parameter for the `updateWebhookSubscriptionSigningConfiguration` mutation."""
type UpdateWebhookSubscriptionSigningConfigurationPayload {
  """The details of the updated webhook subscription."""
  webhookSubscription: WebhookSubscription!
}

"""The details of the webhook subscription signing configuration to be updated."""
input UpdateWebhookSubscriptionSigningConfiguration_SubscriptionInput {
  """The identifier for the `WebhookSubscription`."""
  id: String!
  """
  The algorithm for signing webhooks.
  
  Currently, two codes are defined:
  
  - `None` indicates no signature will be attached.
  - `SeekHmacSha512` indicates a HMAC SHA-512 hex digest will be attached to each request as a `Seek-Signature` header.
  
  A webhook's signature can be used to validate that the request originated from SEEK.
  
  Use a constant-time algorithm to validate the signature.
  Regular comparison methods like the `==` operator are susceptible to timing attacks.
  """
  signingAlgorithmCode: String!
  """
  The secret for signing webhooks.
  
  This must be specified if `signingAlgorithmCode` is not `None`.
  It is used as the key to generate a message authentication code for each request.
  
  The secret should be a random string with high entropy that is not reused for any other purpose.
  """
  secret: String
}

"""The input parameter for the `uploadCandidate` mutation."""
input UploadCandidateInput {
  """The details of the `Candidate` to be uploaded."""
  candidate: UploadCandidate_CandidateInput!
  """The details of the `CandidateProfile` to be uploaded."""
  candidateProfile: UploadCandidate_CandidateProfileInput!
  """The details of the `HiringOrganization` that submitted the candidate profile."""
  hiringOrganization: UploadCandidate_HiringOrganizationInput!
}

"""The output parameter for the `uploadCandidate` mutation."""
union UploadCandidatePayload = UploadCandidatePayload_Conflict | UploadCandidatePayload_Success

"""The conflict result for the `uploadCandidate` mutation."""
type UploadCandidatePayload_Conflict {
  """
  The details of the conflicting candidate.
  
  The conflicting candidate profile is available in the `profiles` field.
  """
  conflictingCandidate: Candidate!
  """The details of the hiring organization that uploaded the candidate and their profile."""
  hiringOrganization: HiringOrganization!
}

"""The success result for the `uploadCandidate` mutation."""
type UploadCandidatePayload_Success {
  """
  The details of the uploaded candidate.
  
  The uploaded candidate profile is available in the `profiles` field.
  """
  candidate: Candidate!
  """The details of the hiring organization that uploaded the candidate and their profile."""
  hiringOrganization: HiringOrganization!
}

"""The details of the candidate to be uploaded."""
input UploadCandidate_CandidateInput {
  """
  The candidate's primary email address.
  
  The value must match one of the candidate's email addresses.
  Duplicate uploads will result in a `BAD_USER_INPUT` error.
  """
  seekPrimaryEmailAddress: String!
  """
  Instructions on how this candidate should be distributed.
  
  Currently, one product code is defined for uploaded candidates:
  
  - `ProactiveSourcing` indicates that the candidate may be viewed in SEEK Talent Search.
  """
  distributionGuidelines: DistributionGuidelinesInput!
  """
  The personal details of the candidate to be uploaded.
  
  At least one email address is required in `communication`,
  and one of the provided values must match `seekPrimaryEmailAddress`.
  """
  person: CandidatePersonInput!
}

"""The details of the candidate profile to be uploaded."""
input UploadCandidate_CandidateProfileInput {
  """
  When the candidate profile was first created in the partner system.
  
  Expects a RFC 3339 compliant date time.
  Millisecond precision is optional, and set to 0 if not provided.
  """
  createDateTime: DateTime!
  """
  When the candidate profile was last updated in the partner system.
  
  Expects a RFC 3339 compliant date time.
  Millisecond precision is optional, and set to 0 if not provided.
  """
  updateDateTime: DateTime!
  """
  The workflow process history of the candidate.
  
  A maximum of 20 process history items may be provided on initial upload.
  """
  seekProcessHistory: [CandidateProcessHistoryItemInput!]!
  """
  The candidate's preferences in an ideal position.
  
  `ProactiveSourcing` candidates may have 0–1 position preferences.
  """
  positionPreferences: [PositionPreferenceInput!]!
  """
  Any associated actions that can be performed on the candidate profile.
  
  Only one of each type of action is permitted for the candidate profile.
  
  Currently, one `code` is defined:
  
  - `ViewProfile` indicates that the URL is used to view the candidate's profile.
  """
  seekActions: [CandidateProcessActionInput!]!
}

"""Details of the `HiringOrganization` that submitted the candidate profile."""
input UploadCandidate_HiringOrganizationInput {
  """The identifier for the `HiringOrganization` that submitted the candidate profile."""
  id: String!
}

"""An address of a human-accessible web page."""
type WebUrl {
  """The URL of the web page."""
  url: String!
}

"""An address of a human-accessible web page."""
input WebUrlInput {
  """The URL of the web page."""
  url: String!
}

"""An attempt to deliver a specific `Event` to a `WebhookSubscription`."""
type WebhookAttempt {
  """The identifier for the `WebhookAttempt`."""
  id: ObjectIdentifier!
  """The date & time that the webhook attempt was acknowledged or timed out."""
  createDateTime: DateTime!
  """The event that was attempted to be delivered."""
  event: Event!
  """
  The webhook subscription that was the target of the delivery attempt.
  
  This will be `null` if the subscription has since been deleted.
  """
  webhookSubscription: WebhookSubscription
  """The HTTP request containing the webhook attempt."""
  webhookRequest: WebhookRequest!
}

"""A webhook attempt in a paginated list."""
type WebhookAttemptEdge {
  """
  The opaque cursor to the webhook attempt.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual webhook attempt."""
  node: WebhookAttempt!
}

"""A page of webhook attempts."""
type WebhookAttemptsConnection {
  """The page of webhook attempts and their corresponding cursors."""
  edges: [WebhookAttemptEdge!]!
  """The pagination metadata for this page of webhook attempts."""
  pageInfo: PageInfo!
}

"""
The criteria to filter webhook attempts by.

These are `WebhookAttempt`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input WebhookAttemptsFilterInput {
  """
  The creation date & time that resulting webhook attempts must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookAttemptsConnection`.
  """
  afterDateTime: DateTime
  """
  The creation date & time that resulting webhook attempts must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookAttemptsConnection`.
  """
  beforeDateTime: DateTime
  """
  The types of webhook attempts to retrieve.
  
  See the `WebhookAttempt` documentation for a list of possible description codes.
  
  If this is not provided then attempts of all types will be returned.
  """
  descriptionCodes: [String!]
}

"""
An HTTP request to a `WebhookSubscription`.

HTTP requests are associated with one or more `WebhookAttempt`s representing each `Event` in the request body.
"""
type WebhookRequest {
  """
  The identifier for the HTTP request.
  
  This is included in the request as an `X-Request-Id` custom header.
  """
  requestId: String!
  """
  The webhook subscription that was the target of the HTTP request.
  
  This will be `null` if the subscription has since been deleted.
  """
  webhookSubscription: WebhookSubscription
  """
  The HTTP status code returned by the subscription endpoint.
  
  When an HTTP response wasn't received a synthetic status code will be generated:
  
  - For `InvalidUrl` the status code will be set to `400`.
  - For `RequestTimeout` the status code will be set to `504`.
  """
  statusCode: Int!
  """
  The high-level description of the HTTP request's result.
  
  Currently, four codes are defined:
  
  - `BadResponse` indicates the subscription endpoint returned a non-2xx HTTP response.
  - `InvalidUrl` indicates the subscription URL did not pass validation.
  - `RequestTimeout` indicates the subscription endpoint took more than 10 seconds to respond.
  - `Success` indicates the subscription endpoint returned a 2xx HTTP response.
  """
  descriptionCode: String!
  """
  The latency of the HTTP request in milliseconds.
  
  This will be `null` if the request wasn't made (i.e. an `InvalidUrl` error occurred).
  """
  latencyMs: Int
  """
  The date & time the HTTP request occurred.
  
  This field has weak ordering guarantees, so it should not be used as a pagination argument.
  """
  createDateTime: DateTime!
  """The list of events that were attempted to be delivered in the request body."""
  attempts: [WebhookAttempt!]!
}

"""A webhook request in a paginated list."""
type WebhookRequestEdge {
  """
  The opaque cursor to the webhook request.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual webhook request."""
  node: WebhookRequest!
}

"""
The criteria to filter webhook requests by.

These are `WebhookRequest`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input WebhookRequestFilterInput {
  """
  The creation date & time that resulting webhook requests must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookRequestsConnection`.
  """
  afterDateTime: DateTime
  """
  The creation date & time that resulting webhook requests must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookRequestsConnection`.
  """
  beforeDateTime: DateTime
  """
  The types of webhook requests to retrieve.
  
  See the `WebhookRequest` documentation for a list of possible description codes.
  
  If this is not provided then requests of all types will be returned.
  """
  descriptionCodes: [String!]
}

"""A page of webhook requests."""
type WebhookRequestsConnection {
  """The page of webhook requests and their corresponding cursors."""
  edges: [WebhookRequestEdge!]!
  """The pagination metadata for this page of webhook requests."""
  pageInfo: PageInfo!
}

"""
A subscription for a given event type and scheme to be delivered via webhook.

Events are delivered in batches with a HTTP POST request to the specified subscription URL.
"""
type WebhookSubscription {
  """The identifier for the `WebhookSubscription`."""
  id: ObjectIdentifier!
  """
  The type of event.
  
  See `Event` implementations for a list of supported values.
  """
  eventTypeCode: String!
  """
  The data source for the event.
  
  This commonly refers to a SEEK brand.
  See the relevant `Event` implementation for a list of supported schemes.
  """
  schemeId: String!
  """
  The optional hirer ID to receive events from.
  
  By default webhook subscriptions will send events from all hirers the partner has access to.
  A non-null `hirerId` indicates that this subscription is filtered to a single hirer.
  """
  hirerId: ObjectIdentifier
  """
  The optional hirer associated with this webhook subscription.
  
  This will only be accessible if there is an active relationship between the partner and hirer.
  
  By default webhook subscriptions will send events from all hirers the partner has access to.
  A non-null `hirer` field indicates that this subscription is filtered to a single hirer.
  """
  hirer: HiringOrganization
  """The subscriber-owned URL where events are sent to."""
  url: String!
  """
  The maximum number of events that will be sent in each HTTP request.
  
  This number is between 1 and 10 inclusive. Defaults to 10.
  """
  maxEventsPerAttempt: Int!
  """
  The algorithm for signing webhooks.
  
  Currently, two codes are defined:
  
  - `None` indicates no signature will be attached.
  - `SeekHmacSha512` indicates a HMAC SHA-512 hex digest will be attached to each request as a `Seek-Signature` header.
  
  A webhook's signature can be used to validate that the request originated from SEEK.
  
  Use a constant-time algorithm to validate the signature.
  Regular comparison methods like the `==` operator are susceptible to timing attacks.
  """
  signingAlgorithmCode: String!
  """
  The date & time the webhook subscription was created.
  
  Initial `afterDateTime` and `beforeDateTime` filters apply to this field.
  """
  createDateTime: DateTime!
  """The date & time the webhook subscription was last updated."""
  updateDateTime: DateTime!
  """
  A page of webhook requests for the subscription matching the specified criteria.
  
  A maximum of 100 webhook requests can be returned in a single page.
  Additional webhook requests can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest known request if no pagination arguments are provided.
  """
  webhookRequests(
    """
    An opaque cursor to the earlier bounding webhook request.
    
    Resulting webhook requests will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook request.
    
    Resulting webhook requests will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook requests to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess webhook requests will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook requests to return from the end of the list.
    
    Excess webhook requests will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookRequest`-specific criteria to filter by."""
    filter: WebhookRequestFilterInput
  ): WebhookRequestsConnection!
  """
  A page of replays for the current webhook subscription matching the specified criteria.
  
  A maximum of 100 webhook subscription replays can be returned in a single page.
  Additional subscription replays can be queried using a pagination cursor.
  
  The result list is returned in ascending creation date & time order.
  It starts from the earliest subscription replay if no pagination arguments are provided.
  """
  webhookSubscriptionReplays(
    """
    An opaque cursor to the earlier bounding webhook subscription replay.
    
    Resulting subscription replays will _succeed_ this cursor.
    """
    after: String
    """
    An opaque cursor to the later bounding webhook subscription replay.
    
    Resulting subscription replays will _precede_ this cursor.
    """
    before: String
    """
    The upper limit of webhook subscription replays to return from the start of the list.
    
    Defaults to 10 if neither `first` nor `last` are specified.
    Excess subscription replays will be trimmed from the end of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    first: Int
    """
    The upper limit of webhook subscription replays to return from the end of the list.
    
    Excess subscription replays will be trimmed from the start of the list.
    
    `first` and `last` cannot be specified in the same query.
    """
    last: Int
    """The additional `WebhookSubscriptionReplay`-specific criteria to filter by."""
    filter: WebhookSubscriptionReplaysFilterInput
  ): WebhookSubscriptionReplaysConnection!
}

"""A webhook subscription in a paginated list."""
type WebhookSubscriptionEdge {
  """
  The opaque cursor to the webhook subscription.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual webhook subscription."""
  node: WebhookSubscription!
}

"""The state of a request to replay events for a `WebhookSubscription`."""
type WebhookSubscriptionReplay {
  """The identifier for the `WebhookSubscriptionReplay`."""
  id: ObjectIdentifier!
  """The date & time that the webhook subscription replay was created."""
  createDateTime: DateTime!
  """
  The date & time that the subscription replay was last updated.
  
  Subscription replays are updated whenever the replay makes forward progress.
  """
  updateDateTime: DateTime!
  """
  The webhook subscription that was the target of the replay.
  
  This will be `null` if the subscription has since been deleted.
  """
  webhookSubscription: WebhookSubscription
  """
  The current status of the replay.
  
  Currently, the following status codes are defined:
  
  - `Submitted`
  - `Running`
  - `Completed`
  - `Cancelled`
  """
  statusCode: String!
}

"""A webhook subscription replay in a paginated list."""
type WebhookSubscriptionReplayEdge {
  """
  The opaque cursor to the webhook subscription replay.
  
  This can be used as a subsequent pagination argument.
  """
  cursor: String!
  """The actual webhook subscription replay."""
  node: WebhookSubscriptionReplay!
}

"""A page of webhook subscription replays."""
type WebhookSubscriptionReplaysConnection {
  """The page of webhook subscription replays and their corresponding cursors."""
  edges: [WebhookSubscriptionReplayEdge!]!
  """
  The pagination metadata for this page of webhook subscription replays.
  
  Disclaimer:
  - The property `hasPreviousPage` will always be false when paginating by `first`
  - The property `hasNextPage` will always be false when paginating by `last`
  
  To discern whether a next/previous page exists in these conditions, an additional request will need to be made to retrieve the next/previous page.
  """
  pageInfo: PageInfo!
}

"""
The criteria to filter webhook subscription replays by.

These are `WebhookSubscriptionReplay`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input WebhookSubscriptionReplaysFilterInput {
  """
  The replay status to filter by.
  
  See the `WebhookSubscriptionReplay` documentation for a list of possible status codes.
  
  If this is not provided then replays of all statuses will be returned.
  """
  statusCode: String
}

"""A page of webhook subscriptions."""
type WebhookSubscriptionsConnection {
  """The page of webhook subscriptions and their corresponding cursors."""
  edges: [WebhookSubscriptionEdge!]!
  """The pagination metadata for this page of subscriptions."""
  pageInfo: PageInfo!
}

"""
The criteria to filter webhook subscriptions by.

These are `WebhookSubscription`-specific extensions on top of the standard pagination arguments `before`, `after`, `first` and `last`.
"""
input WebhookSubscriptionsFilterInput {
  """
  The creation date & time that resulting webhook subscriptions must succeed.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookSubscriptionsConnection`.
  """
  afterDateTime: DateTime
  """
  The creation date & time that resulting webhook subscriptions must precede.
  
  This can be used to initiate the retrieval of paginated results.
  Subsequent queries should use the opaque cursors returned from `WebhookSubscriptionsConnection`.
  """
  beforeDateTime: DateTime
  """
  The event types of webhook subscriptions to retrieve.
  
  See the `WebhookSubscription` documentation for a list of supported event types.
  
  If this is not provided then events of all types will be returned.
  """
  eventTypeCodes: [String!]
  """
  The hirer IDs of the hirer-filtered webhook subscriptions to retrieve.
  
  If this is not provided then both hirer-filtered and unfiltered subscriptions will be returned.
  """
  hirerIds: [String!]
}

directive @paginated(defaultPageSize: Int!) on FIELD_DEFINITION

directive @unpaginated(indicativeLength: Int!) on FIELD_DEFINITION
